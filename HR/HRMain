using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection.Emit;
using System.Xml;
using Microsoft.Extensions.Configuration;
using Microsoft.SharePoint.Client;
using TSS.HRAutomation.StaffSyncFromWD.models;

namespace TSS.HRAutomation.StaffSyncFromWD
{
    class Program
    {
        public static void SyncCheckInJob(IConfigurationRoot config)
        {
            bool isDebug = config["AppSettings:Debug"] == "true";
            string functionName = "SyncCheckInJob";
            string systemLogPath = config["AppSettings:LogPath"];
            string logFileName =
                "SyncCheckInToPMALog" +
                DateTime.Now.ToString("yyyyMMddHHmmss") +
                ".txt";
            DateTime now = DateTime.Now;
            string wfRequestListUrl = config["AppSettings:WFRequestListUrl"];
            string wfSyncStaffToPMAListUrl =
                config["AppSettings:WFSyncStaffToPMAListUrl"];
            string logsDocumentUrl = config["AppSettings:LogsDocumentUrl"];
            string sqlConn = config["AppSettings:SQLConnection"];
            string HRDocuments = config["AppSettings:HRDocuments"];

            string AKVName = config["AppSettings:AKVName"];
            string HRSiteUrl = config["AppSettings:HRSiteUrl"];
            string HRAppId = config["AppSettings:HRAppId"];
            string HRAKVAppSecret = config["AppSettings:HRAKVAppSecret"];
            string HRAppSecret =
                isDebug
                    ? config["AppSettings:HRAppSecret"]
                    : Helper.GetAKVSecret(AKVName, HRAKVAppSecret);
            Helper.writeLogs("Start to " + functionName,
          systemLogPath + logFileName);

            //Get WFRequest ListItemCollection from SharePoint Online site
            Helper.writeLogs("Start to content HRsharepoint",
               systemLogPath + logFileName);
            ClientContext spContext =
                Helper.GetAppCtx(HRSiteUrl, HRAppId, HRAppSecret);
            Web HRWeb = spContext.Web;

            try
            {

                #region init all data and table



                Helper.writeLogs("finish to content HRsharepoint",
                   systemLogPath + logFileName);
                List wfRequestList = HRWeb.GetListByUrl(wfRequestListUrl);
                List wfSyncStaffToPMAList =
                    HRWeb.GetListByUrl(wfSyncStaffToPMAListUrl);

                CamlQuery wfRequestQuery = new CamlQuery();
                Helper.writeLogs("Begin to set Dictionary",
                    systemLogPath + logFileName);
                //设置字典
                Dictionary<string, string> locationDictionary = new Dictionary<string, string>()
            {
                { "SH", "AIAITSH" },
                { "WX", "AIAITWX" },
                { "XA", "AIAITXA" },
                { "BJ", "AIAITBJ" },
                { "CD", "AIAITCD" },
                { "GZ", "AIAIT" },
                { "KL", "AIAITKL" }
            };
                Dictionary<string, string> resTypeDictionary = new Dictionary<string, string>()
            {
                { "01", "99" },
                { "01-01", "05" },
                { "01-02", "20" },
                { "02", "08" },
                { "03", "30" },
                { "04", "09" }
            };
                Helper.writeLogs("End to set Dictionary",
                               systemLogPath + logFileName);
                Helper.writeLogs("bengin to get wfRequest",
               systemLogPath + logFileName);
                // wfRequestQuery.ViewXml = @"<View></View>";
                wfRequestQuery.ViewXml =
                    @"<View>
                                           <Query>
                                              <Where><Neq><FieldRef Name='Status' /><Value Type='Text'>Draft</Value></Neq></Where>
                                           </Query>
                                     </View>";
                ListItemCollection wfRequestItems =
                    wfRequestList.GetItems(wfRequestQuery);
                Helper.writeLogs("bengin to get wfSyncStaffToPMAList",
                         systemLogPath + logFileName);
                CamlQuery wfSyncStaffToPMAListQuery = new CamlQuery();
                wfSyncStaffToPMAListQuery.ViewXml =
                    @"<View>
                                                        <Query>
                                                              <Where>
                                                         <And>
                                                                  <And>
                                                                     <Neq>
                                                                        <FieldRef Name='WFType' />
                                                                        <Value Type='Text'>3</Value>
                                                                     </Neq>
                                                                 <IsNull>
                                                                        <FieldRef Name='Status'/>
                                                                 </IsNull>
</And>
                                      <Leq><FieldRef Name='Modified' /><Value Type='DateTime'>" +
                          now.AddMinutes(-10).ToString("o") +
                          @"</Value></Leq>
                     </And>



                                                               </Where>
                                                        </Query>
                                                  </View>";
                ListItemCollection wfSyncStaffToPMAListItems =
                    wfSyncStaffToPMAList.GetItems(wfSyncStaffToPMAListQuery);

                spContext
                    .Load(wfRequestItems,
                    items =>
                        items
                            .Include(item => item.Id,
                            item => item["GlobalID"],
                            item => item["EnglishName"],
                            item => item["CosCenter"],
                            item => item["BusinessTitle"],
                            item => item["EmailAddress"],
                            item => item["StaffTypeBase"],
                            item => item["Gender"],
                            item => item["EffectiveDate"],
                            item => item["LogOnID"],
                            item => item["StaffRole"],
                            item => item["Team"],
                            item => item["OfficeLocation"],
                            item => item["ChineseName"],
                            item => item["ConvertionType"],
                            item => item["UserNo"]
                            ));

                spContext
                    .Load(wfSyncStaffToPMAListItems,
                    items =>
                        items
                            .Include(item => item.Id,
                            item => item["FormID"],
                            item => item["WFType"],
                            item => item["Status"],
                            item => item["PMALog"]));

                spContext.ExecuteQuery();

                //Init WFRequest Table
                DataTable wfRequestTable = new DataTable();
                wfRequestTable.Columns.Add("ID");
                wfRequestTable.Columns.Add("GlobalID");
                wfRequestTable.Columns.Add("EffectiveDate");
                wfRequestTable.Columns.Add("EnglishName");
                wfRequestTable.Columns.Add("OfficeLocation");
                wfRequestTable.Columns.Add("CostCenter");
                wfRequestTable.Columns.Add("BusinessTitle");
                wfRequestTable.Columns.Add("Gender");
                wfRequestTable.Columns.Add("StaffTypeBase");
                wfRequestTable.Columns.Add("EmailAddress");
                wfRequestTable.Columns.Add("ChineseName");
                wfRequestTable.Columns.Add("LogOnID");
                wfRequestTable.Columns.Add("StaffRole");
                wfRequestTable.Columns.Add("Team");
                wfRequestTable.Columns.Add("ConvertionType");
                wfRequestTable.Columns.Add("UserNo");

                try
                {
                    foreach (ListItem use in wfSyncStaffToPMAListItems)
                    {
                        foreach (ListItem wfrequest in wfRequestItems)
                        {
                            if (use["FormID"].ToString() == wfrequest.Id.ToString())
                            {
                                string tempEffectiveDate =
                                    formatEffectiveDate(wfrequest["EffectiveDate"] == null ? "" : Convert.ToDateTime(wfrequest["EffectiveDate"].ToString()).AddHours(8).ToString());
                                DataRow wfrequestRow = wfRequestTable.NewRow();
                                wfrequestRow["ID"] = wfrequest.Id;
                                wfrequestRow["GlobalID"] = wfrequest["GlobalID"];
                                wfrequestRow["EffectiveDate"] = tempEffectiveDate;
                                wfrequestRow["EnglishName"] =
                                    wfrequest["EnglishName"];
                                wfrequestRow["OfficeLocation"] = wfrequest["OfficeLocation"] == null ? "" : wfrequest["OfficeLocation"].ToString();
                                wfrequestRow["CostCenter"] =
                                    wfrequest["CosCenter"] == null
                                        ? ""
                                        : wfrequest["CosCenter"]
                                            .ToString()
                                            .Split("#;")[0];
                                wfrequestRow["BusinessTitle"] =
                                    wfrequest["BusinessTitle"] == null
                                        ? ""
                                        : wfrequest["BusinessTitle"]
                                            .ToString()
                                            .Split("#;")[0];
                                wfrequestRow["Gender"] = wfrequest["Gender"] == null ? "" : wfrequest["Gender"].ToString();
                                wfrequestRow["StaffTypeBase"] = wfrequest["StaffTypeBase"] == null ? "" : wfrequest["StaffTypeBase"].ToString();
                                wfrequestRow["EmailAddress"] =
                                    wfrequest["EmailAddress"];
                                wfrequestRow["ConvertionType"] =
                                    wfrequest["ConvertionType"];
                                wfrequestRow["ChineseName"] =
                                    wfrequest["ChineseName"];
                                wfrequestRow["LogOnID"] =
                                    wfrequest["LogOnID"].ToString().ToUpper();
                                wfrequestRow["StaffRole"] =
                                    wfrequest["StaffRole"] == null
                                        ? ""
                                        : wfrequest["StaffRole"]
                                            .ToString()
                                            .Split("#;")[0];
                                wfrequestRow["Team"] =
                                    wfrequest["Team"] == null
                                        ? ""
                                        : wfrequest["Team"]
                                            .ToString()
                                            .Split("#;")[0];
                                wfrequestRow["UserNo"] = Helper.IsNotNullOrEmpty(wfrequest["UserNo"]) ? wfrequest["UserNo"].ToString() : "";
                                wfRequestTable.Rows.Add(wfrequestRow);
                            }
                        }
                    }
                }
                catch
                {
                    Helper
                        .writeLogs("Error to loaded wfRequestTable",
                        systemLogPath + logFileName);
                }

                //Init SyncStaffToPMA Table
                DataTable wfSyncStaffToPMAListTable = new DataTable();
                wfSyncStaffToPMAListTable.Columns.Add("ID");
                wfSyncStaffToPMAListTable.Columns.Add("FormID");
                wfSyncStaffToPMAListTable.Columns.Add("WFType");
                wfSyncStaffToPMAListTable.Columns.Add("Status");
                wfSyncStaffToPMAListTable.Columns.Add("PMALog");

                try
                {
                    foreach (ListItem
                        wfSyncStaffToPMAListItem
                        in
                        wfSyncStaffToPMAListItems
                    )
                    {
                        DataRow wfSyncStaffToPMAListRow =
                            wfSyncStaffToPMAListTable.NewRow();
                        wfSyncStaffToPMAListRow["ID"] = wfSyncStaffToPMAListItem.Id;
                        wfSyncStaffToPMAListRow["FormID"] =
                            wfSyncStaffToPMAListItem["FormID"];
                        wfSyncStaffToPMAListRow["WFType"] =
                            wfSyncStaffToPMAListItem["WFType"];
                        wfSyncStaffToPMAListRow["Status"] =
                            wfSyncStaffToPMAListItem["Status"];
                        wfSyncStaffToPMAListRow["PMALog"] =
                            wfSyncStaffToPMAListItem["PMALog"];
                        wfSyncStaffToPMAListTable.Rows.Add(
                            wfSyncStaffToPMAListRow
                        );
                    }
                }
                catch
                {
                    Helper
                        .writeLogs("Error to loaded wfSyncStaffToPMAListTable",
                        systemLogPath + logFileName);
                }
                #endregion


                //Insert PMA Staff Info
                DataRow[] insertStaffs = wfSyncStaffToPMAListTable.Select("WFType='1'");
                // var TypeOneMap = new HashSet<string>();
                var TypeOneMap = new List<string>();

                if (insertStaffs.Length > 0)
                    foreach (DataRow insertStaff in insertStaffs)
                    {
                        var item = TypeOneMap.FindAll(x => x == insertStaff["FormID"].ToString());
                        if (item.Count != 0)
                        {
                            ListItem updateItem =
                              wfSyncStaffToPMAList
                                  .GetItemById(Int32
                                      .Parse(insertStaff["ID"].ToString()));
                            updateItem["Status"] = "Existed";
                            updateItem.Update();
                            spContext.ExecuteQuery();
                            continue;
                        }
                        TypeOneMap.Add(insertStaff["FormID"].ToString());
                        try
                        {
                            DataRow staffDR =
                                wfRequestTable
                                    .Select("ID='" +
                                    insertStaff["FormID"].ToString() +
                                    "'")
                                    .First();


                            #region Storage Process INPUT and SqlParameter
                            /*  @asSTAFF_CODE	    	CHAR(18),
                            @asID_CARD		    	CHAR(18),
                            @asSTAFF_NAME	    	VARCHAR(30),
                            @asSTATUS		    	CHAR(1),
                            @anTITLE_ID		    	SMALLINT,
                            @asLOGON_ID			    CHAR(7),
                            @asPACII_ID		    	CHAR(7),
                            @anTEAM_CODE	    	SMALLINT,
                            @asEMAIL		    	VARCHAR(60),
                            @asAUTHORITY	    	CHAR(4),
                            @dtJOIN_DATE	    	char(10),
                            @dtTERM_DATE	    	char(10),
                            @asIS_FINANCE	    	CHAR(1),
                            @asIS_QA		        CHAR(1),
                            @asEXTENSION		    CHAR(10),
                            @asCONTACT_NO		    CHAR(16),
                            @dtteam_effective_date	char(10),
                            @asDOB				    CHAR(4),
                            @asADMIN_LOGON_ID	    CHAR(7),
                            @asCOST_CENTER_CODE	    varchar(50),
                            @asPACII_DEPT_CODE	    VARCHAR(7),
                            @res_type               VARCHAR(10),
                            @chinese_name           nvarchar(30),
                            @card_no                varchar(20),
                            @location               int,
                            @hr_title               int,
                            @salutation             char(2),
                            @seat_type              int,
                            @erp_received_date      char(10),
                            @erp_register_location  nvarchar(20),
                        */
                            string SQLText = string.Format("SELECT User_No FROM tpma_StaffBasic WHERE email='{0}'", staffDR["EmailAddress"].ToString());

                            DataTable dt = Helper.runSQLCommand(SQLText, sqlConn, null);
                            bool isAdd =
                               (Helper.IsNotNullOrEmpty(staffDR["UserNo"]) || Helper.IsNotNullOrEmpty(staffDR["ConvertionType"]))
                                    ? false
                                    : true;
                            string UserNo = "";

                            if (!isAdd && dt.Rows.Count == 0)
                            {
                                UserNo = staffDR["UserNo"].ToString();
                            }
                            else if (!isAdd && dt.Rows.Count > 0)
                            {
                                UserNo = dt.Rows[0]["User_No"].ToString();
                            }
                            string asSTAFF_CODE =
                                staffDR["GlobalID"] == null
                                    ? null
                                    : staffDR["GlobalID"].ToString();
                            string asID_CARD =
                                staffDR["GlobalID"] == null
                                    ? null
                                    : staffDR["GlobalID"].ToString();
                            string asSTAFF_NAME =
                                staffDR["EnglishName"] == null
                                    ? null
                                    : staffDR["EnglishName"].ToString();
                            int anTITLE_ID =
                                Int32
                                    .Parse(staffDR["StaffRole"] == null
                                        ? null
                                        : staffDR["StaffRole"].ToString());
                            string asLOGON_ID =
                                staffDR["LogOnID"] == null
                                    ? null
                                    : staffDR["LogOnID"].ToString();
                            int anTEAM_CODE =
                                Int32
                                    .Parse(staffDR["Team"] == null
                                        ? null
                                        : staffDR["Team"].ToString());
                            string asEMAIL =
                                staffDR["EmailAddress"] == null
                                    ? null
                                    : staffDR["EmailAddress"].ToString();
                            string asPACII_DEPT_CODE = Helper.IsNotNullOrEmpty(staffDR["OfficeLocation"]) ? staffDR["OfficeLocation"].ToString().Substring(3, 2) : "GZ";
                            string resType = Helper.IsNotNullOrEmpty(staffDR["StaffTypeBase"]) ? staffDR["StaffTypeBase"].ToString().Split("#")[0].ToString() : "01-01";
                            int hr_title = Helper.IsNotNullOrEmpty(staffDR["BusinessTitle"]) ? int.Parse(staffDR["BusinessTitle"].ToString()) : -1;
                            int Gender = Helper.IsNotNullOrEmpty(staffDR["Gender"]) ? int.Parse(staffDR["Gender"].ToString().Split("#")[0].ToString()) : 1;
                            string asCOST_CENTER_CODE =
                                staffDR["CostCenter"] == null
                                    ? null
                                    : staffDR["CostCenter"].ToString(); // "CN03D102";//CostCenter
                            string chinese_name =
                                staffDR["ChineseName"] == null
                                    ? null
                                    : staffDR["ChineseName"].ToString();
                            int location = -1;
                            string dtteam_effective_date =
                                staffDR["EffectiveDate"] == null
                                    ? null
                                    : staffDR["EffectiveDate"].ToString();
                            string inData = "@asSTAFF_CODE:" + asSTAFF_CODE + "  " + "@asID_CARD:" + asID_CARD + "  " + "@asSTAFF_NAME:" + asSTAFF_NAME + "@asSTATUS:  A   " + "@anTITLE_ID" + anTITLE_ID + "  " + "@asLOGON_ID :" + asLOGON_ID + "  " + "@anTEAM_CODE: " + anTEAM_CODE + "  " + "@asEMAIL: " + asEMAIL + " @asAUTHORITY: 3  " + "@dtteam_effective_date: " + dtteam_effective_date + "  " + "@dtTERM_DATE: " + DBNull.Value + "     N  N  " + "@dtteam_effective_date: " + dtteam_effective_date + "@asADMIN_LOGON_ID  SyncJob  " + "@asCOST_CENTER_CODE: " + "@asPACII_DEPT_CODE: " + locationDictionary[asPACII_DEPT_CODE] + "@res_type: " + resTypeDictionary[resType] + "@asCOST_CENTER_CODE: " + asCOST_CENTER_CODE + "  " + "@chinese_name: " + chinese_name + "  " + "@location: " + location + "  " + "@hr_title: " + hr_title + "@salutation: " + Gender;
                            SqlParameter[] sqlParameters =
                                {
                            new SqlParameter("@asSTAFF_CODE", asSTAFF_CODE),
                            new SqlParameter("@asID_CARD", asID_CARD),
                            new SqlParameter("@asSTAFF_NAME", asSTAFF_NAME),
                            new SqlParameter("@asSTATUS", "A"),
                            new SqlParameter("@anTITLE_ID", anTITLE_ID),
                            new SqlParameter("@asLOGON_ID", asLOGON_ID),
                            new SqlParameter("@asPACII_ID", ""),
                            new SqlParameter("@anTEAM_CODE", anTEAM_CODE),
                            new SqlParameter("@asEMAIL", asEMAIL),
                            new SqlParameter("@asAUTHORITY", 3),
                            new SqlParameter("@dtJOIN_DATE",
                                dtteam_effective_date),
                            new SqlParameter("@dtTERM_DATE", DBNull.Value),
                            new SqlParameter("@asIS_FINANCE", "N"),
                            new SqlParameter("@asIS_QA", "N"),
                            new SqlParameter("@asEXTENSION", ""),
                            new SqlParameter("@asCONTACT_NO", ""),
                            new SqlParameter("@dtteam_effective_date",
                                dtteam_effective_date),//加八小时
                            new SqlParameter("@asDOB", ""),
                            new SqlParameter("@asADMIN_LOGON_ID", "SyncJob"),
                            new SqlParameter("@asCOST_CENTER_CODE",
                                asCOST_CENTER_CODE),
                            new SqlParameter("@asPACII_DEPT_CODE", locationDictionary[asPACII_DEPT_CODE]),//oficlocation mapping
                            new SqlParameter("@res_type", resTypeDictionary[resType]),//maping //stsfftypebase
                            new SqlParameter("@chinese_name", chinese_name),
                            new SqlParameter("@card_no", ""),
                            new SqlParameter("@location", location),
                            new SqlParameter("@hr_title", hr_title),//不应该用staffrole BuTitle
                            new SqlParameter("@salutation", Gender),//传入就可 //gender
                            //new SqlParameter("@seat_type", -1),
                            new SqlParameter("@erp_received_date", ""),
                            new SqlParameter("@erp_register_location", ""),
                            new SqlParameter("@building_card_no", "1234")
                        };

                            string UpData = "userNo: " + UserNo + " " + "@asSTAFF_CODE:" + asSTAFF_CODE + "  " + "@asID_CARD:" + asID_CARD + "  " + "@asSTAFF_NAME:" + asSTAFF_NAME + "@asSTATUS:  A   " + "@anTITLE_ID" + anTITLE_ID + "  " + "@asLOGON_ID :" + asLOGON_ID + "  " + "@anTEAM_CODE: " + anTEAM_CODE + "  " + "@asEMAIL: " + asEMAIL + " @asAUTHORITY: 3  " + "@dtteam_effective_date: " + dtteam_effective_date + "  " + "@dtTERM_DATE: " + DBNull.Value + "     N  N  " + "@dtteam_effective_date: " + dtteam_effective_date + "@asADMIN_LOGON_ID  SyncJob  " + "@asCOST_CENTER_CODE: " + "@asPACII_DEPT_CODE: " + locationDictionary[asPACII_DEPT_CODE] + "@res_type: " + resTypeDictionary[resType] + "@asCOST_CENTER_CODE: " + asCOST_CENTER_CODE + "  " + "@chinese_name: " + chinese_name + "  " + "@location: " + location + "  " + "@hr_title: " + hr_title + "@salutation: " + Gender;
                            SqlParameter[] sqlParametersUpdate =
                                {
                            new SqlParameter("@user_no", UserNo),
                            new SqlParameter("@staff_code", asSTAFF_CODE),
                            new SqlParameter("@id_card", asID_CARD),
                            new SqlParameter("@staff_name", asSTAFF_NAME),
                            new SqlParameter("@status", "A"),
                            new SqlParameter("@title_id", anTITLE_ID),
                            new SqlParameter("@logon_id", asLOGON_ID),
                            new SqlParameter("@pacii_id", ""),
                            new SqlParameter("@team_code", anTEAM_CODE),
                            new SqlParameter("@email", asEMAIL),
                            new SqlParameter("@authority", 3),
                            new SqlParameter("@join_date",
                                dtteam_effective_date),
                            new SqlParameter("@term_date", DBNull.Value),
                            new SqlParameter("@is_finance", "N"),
                            new SqlParameter("@is_qa", "N"),
                            new SqlParameter("@extension", ""),
                            new SqlParameter("@contact_no", ""),
                            new SqlParameter("@dob", ""),
                            new SqlParameter("@admin_logon_id", "SyncJob"),
                            new SqlParameter("@team_effective_date",
                                dtteam_effective_date),
                            new SqlParameter("@cost_center_code",
                                asCOST_CENTER_CODE),
                            new SqlParameter("@pacii_dept_code", locationDictionary[asPACII_DEPT_CODE]),
                            new SqlParameter("@res_type", resTypeDictionary[resType]),
                            new SqlParameter("@prj_codes", ""),
                            new SqlParameter("@chinese_name", chinese_name),
                            new SqlParameter("@card_no", ""),
                            new SqlParameter("@location", location),
                            new SqlParameter("@hr_title", hr_title),
                            new SqlParameter("@salutation", Gender),
                            //new SqlParameter("@seat_type", -1),
                            new SqlParameter("@erp_received_date", ""),
                            new SqlParameter("@erp_register_location", ""),
                            new SqlParameter("@building_card_no", "1234")
                        };
                            DataTable insertMesg = new DataTable();
                            #endregion


                            Helper
                                .writeLogs("Begin po_insert_staff",
                                systemLogPath + logFileName);
                            if (isAdd)
                            {
                                Helper.writeLogs("THE insertMessage is" + inData, systemLogPath + logFileName);
                                insertMesg = Helper.runStorageProcess("po_insert_staff", sqlConn, sqlParameters, systemLogPath + logFileName);
                                string SQLText2 = string.Format("SELECT User_No FROM tpma_StaffBasic WHERE email='{0}'", staffDR["EmailAddress"].ToString());

                                DataTable dt2 = Helper.runSQLCommand(SQLText, sqlConn, null);

                                if (dt2.Rows.Count > 0)
                                {
                                    ListItem wfRequestUpdateItem = wfRequestList.GetItemById(Int32.Parse(staffDR["ID"].ToString()));
                                    wfRequestUpdateItem["UserNo"] = dt2.Rows[0]["User_No"].ToString();
                                    wfRequestUpdateItem.Update();
                                    spContext.ExecuteQuery();

                                }
                            }
                            else
                            {
                                insertMesg = Helper.runStorageProcess("po_update_staff", sqlConn, sqlParametersUpdate, systemLogPath + logFileName);
                                Helper
                           .writeLogs("END po_update_staff the insertMessage is" +
                           UpData,
                           systemLogPath + logFileName);
                            }
                            if (insertMesg.Rows.Count > 0 && !isAdd)
                            {

                                switch (insertMesg.Rows[0]["return_code"].ToString())
                                {

                                    case "-10": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Save failed. Staff code is duplicated with another active staff.", systemLogPath + logFileName); break;
                                    case "-2 ": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Save failed. Cannot change team as staff's daily entry data is in weekly approval processing. Please try again after weekend.", systemLogPath + logFileName); break;
                                    case "-3 ": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Save failed. Cannot change staff's information as his data is in weekly approval processing. Please try again after weekend.", systemLogPath + logFileName); break;
                                    case "-1": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Error: Save failed.<br>The team effective date of current team should be later than the team effective date of previous team. Please change the team effective date.", systemLogPath + logFileName); break;
                                    case "-4": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Error: Save failed.<br>Cannot change cost center in month-end processing period. Please try again after month-end.", systemLogPath + logFileName); break;
                                    case "-5": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Error: Save failed.<br>Cannot change title which leads charge rate change in month-end processing period. Please try again after month-end.", systemLogPath + logFileName); break;
                                    case "-6": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Error: Save failed.<br>There's daily entry record after The Last Working Day.", systemLogPath + logFileName); break;
                                    case "-7": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Error: Save failed.<br>Cannot transfer this staff because the new project leader can't be assigned by system automatically. Please contact this staff or senior manager to change project leader of related SRs by manual.", systemLogPath + logFileName); break;
                                    case "-8": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Save failed. Role, Cost Center and Office Location don't match.", systemLogPath + logFileName); break;
                                    case "-9": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Save failed. You cannot change the Country of staff who has charges inputted.", systemLogPath + logFileName); break;
                                    case "N": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Warning:Staff name  is duplicated with another active staff.", systemLogPath + logFileName); break;
                                    case "C": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Warning:Staff code  is duplicated with another active staff.", systemLogPath + logFileName); break;

                                    default: Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Successfully saved", systemLogPath + logFileName); break;
                                }

                            }

                            else if (insertMesg.Rows.Count > 0 && isAdd)
                            {
                                switch (insertMesg.Rows[0]["return_code"].ToString())
                                {


                                    case "-1": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Save failed. Staff code  is duplicated with another active staff.", systemLogPath + logFileName); break;

                                    case "N": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Warning:Staff name  is duplicated with another active staff.", systemLogPath + logFileName); break;
                                    case "C": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Warning:Staff code  is duplicated with another active staff.", systemLogPath + logFileName); break;

                                    default: Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Successfully saved", systemLogPath + logFileName); break;
                                }
                            }
                            else
                            {
                                Helper.writeLogs("Calling stored procedure exception returns an empty object", systemLogPath + logFileName);
                            }

                            // DataTable insertMesg = Helper.runStorageProcess("po_insert_staff", sqlConn, sqlParameters);
                            //Update record status in SyncStaffToPMA
                            ListItem updateItem =
                                wfSyncStaffToPMAList
                                    .GetItemById(Int32
                                        .Parse(insertStaff["ID"].ToString()));
                            string endChoose = isAdd ? "add" : "update";
                            try
                            {
                                if (
                                    insertMesg.Rows.Count > 0 && (
                                    insertMesg.Rows[0]["return_code"].ToString() ==
                                    "C" ||
                                    insertMesg.Rows[0]["return_code"].ToString() ==
                                    "N" || !Helper.IsNotNullOrEmpty(insertMesg.Rows[0]["return_code"]))

                                )
                                {
                                    updateItem["Status"] = "Updated";
                                    updateItem["PMALog"] =
                                        DateTime.Now.ToString("MM/dd/yyyy hh:mm tt ") +
                                        endChoose +
                                        " staff information successfully ";
                                    updateItem.Update();
                                }
                                else
                                {
                                    updateItem["Status"] = "Failed";
                                    updateItem["PMALog"] =
                                        DateTime.Now.ToString("MM/dd/yyyy hh:mm tt ") +
                                        endChoose +
                                        " staff information unsuccessfully ";
                                    updateItem.Update();
                                }

                                spContext.ExecuteQuery();
                            }
                            catch
                            {
                                updateItem["Status"] = "Failed";
                                updateItem["PMALog"] =
                                    DateTime.Now.ToString("MM/dd/yyyy hh:mm tt ") +
                                    endChoose +
                                    " staff information unsuccessfully ";
                                updateItem.Update();
                            }

                            //Helper.writeLogs(insertMesg, systemLogPath + logFileName);

                        }
                        catch (System.Exception ex)
                        {
                            Helper.writeLogs("error is:" + ex.Message.ToString(), systemLogPath + logFileName);
                            continue;
                        }
                    }

                //Update PMA Staff Info
                DataRow[] updateStaffs =
                    wfSyncStaffToPMAListTable.Select("WFType='2'");
                if (updateStaffs.Length > 0)
                    foreach (DataRow insertStaff in updateStaffs)
                    {
                        try
                        {
                            DataRow staffDR =
                                wfRequestTable
                                    .Select("ID='" +
                                    insertStaff["FormID"].ToString() +
                                    "'")[0];
                            string SQLText =
                                string
                                    .Format("SELECT User_No FROM tpma_StaffBasic WHERE email='{0}'",
                                    staffDR["EmailAddress"].ToString());

                            DataTable dt =
                                Helper.runSQLCommand(SQLText, sqlConn, null);

                            if (dt.Rows.Count > 0)
                            {
                                //DataRow staffDR = wfRequestTable.Select("ID='" + insertStaff["FormID"].ToString() + "'")[0];
                                try
                                {
                                    string UserNo =
                                        dt.Rows[0]["User_No"].ToString();
                                    string staff_code =
                                        staffDR["GlobalID"] == null
                                            ? null
                                            : staffDR["GlobalID"].ToString();
                                    string id_card =
                                        staffDR["GlobalID"] == null
                                            ? null
                                            : staffDR["GlobalID"].ToString();
                                    string staff_name =
                                        staffDR["EnglishName"] == null
                                            ? null
                                            : staffDR["EnglishName"].ToString();
                                    int title_id =
                                        Int32
                                            .Parse(staffDR["StaffRole"] == null
                                                ? null
                                                : staffDR["StaffRole"].ToString());
                                    string logon_id =
                                        staffDR["LogOnID"] == null
                                            ? null
                                            : staffDR["LogOnID"].ToString();
                                    int team_code =
                                        Int32
                                            .Parse(staffDR["Team"] == null
                                                ? null
                                                : staffDR["Team"].ToString());
                                    string asPACII_DEPT_CODE = Helper.IsNotNullOrEmpty(staffDR["OfficeLocation"]) ? staffDR["OfficeLocation"].ToString().Substring(3, 2) : "GZ";
                                    string resType = Helper.IsNotNullOrEmpty(staffDR["StaffTypeBase"]) ? staffDR["StaffTypeBase"].ToString().Split("#")[0].ToString() : "01-01";
                                    int hr_title = Helper.IsNotNullOrEmpty(staffDR["BusinessTitle"]) ? int.Parse(staffDR["BusinessTitle"].ToString()) : -1;
                                    int Gender = Helper.IsNotNullOrEmpty(staffDR["Gender"]) ? int.Parse(staffDR["Gender"].ToString().Split("#")[0].ToString()) : 1;

                                    string email =
                                        staffDR["EmailAddress"] == null
                                            ? null
                                            : staffDR["EmailAddress"].ToString();
                                    string cost_center_code =
                                        staffDR["CostCenter"] == null
                                            ? null
                                            : staffDR["CostCenter"].ToString(); //"CN03D102";
                                    string chinese_name =
                                        staffDR["ChineseName"] == null
                                            ? null
                                            : staffDR["ChineseName"].ToString();
                                    int location = -1;
                                    string dtteam_effective_date =
                                        staffDR["EffectiveDate"] == null
                                            ? null
                                            : staffDR["EffectiveDate"].ToString();


                                    #region Storage Process INPUT and SqlParameter
                                    /*  @user_no                char(10),
                                    @staff_code             char(18),
                                    @id_card                char(18),
                                    @staff_name             varchar(30),
                                    @status                 char(1),
                                    @title_id               smallint,
                                    @logon_id               char(7),
                                    @pacii_id               char(7),
                                    @team_code              smallint,
                                    @email                  varchar(60),
                                    @authority              char(4),
                                    @join_date              char(10),
                                    @term_date              char(10),
                                    @is_finance             char(1),
                                    @is_qa                  char(1),
                                    @extension              char(10),
                                    @contact_no             char(16),
                                    @dob                    char(4),
                                    @admin_logon_id         char(7),
                                    @team_effective_date    char(10),
                                    @cost_center_code       varchar(50),
                                    @pacii_dept_code        varchar(7),
                                    @res_type               varchar(10),
                                    @prj_codes              varchar(5000) output,
                                    @chinese_name           nvarchar(30),
                                    @card_no                varchar(20),
                                    @location               int,
                                    @hr_title               int,
                                    @salutation             char(2),
                                    @seat_type              int,
                                    @erp_received_date      char(10),
                                    @erp_register_location  nvarchar(20)
                                */
                                    string inOrUpData = "@asSTAFF_CODE:" + staff_code + "  " + "@asID_CARD:" + id_card + "  " + "@asSTAFF_NAME:" + staff_name + "@asSTATUS:  A   " + "@anTITLE_ID" + title_id + "  " + "@asLOGON_ID :" + logon_id + "  " + "@anTEAM_CODE: " + team_code + "  " + "@asEMAIL: " + email + " @asAUTHORITY: 3  " + "@dtteam_effective_date: " + dtteam_effective_date + "  " + "@dtTERM_DATE: " + DBNull.Value + "     N  N  " + "@dtteam_effective_date: " + dtteam_effective_date + "@asADMIN_LOGON_ID  SyncJob  " + "@asCOST_CENTER_CODE: " + "@asPACII_DEPT_CODE: " + locationDictionary[asPACII_DEPT_CODE] + "@res_type: " + resTypeDictionary[resType] + "@asCOST_CENTER_CODE: " + cost_center_code + "  " + "@chinese_name: " + chinese_name + "  " + "@location: " + location + "  " + "@hr_title: " + hr_title + "@salutation: " + Gender;

                                    SqlParameter[] sqlParameters =
                                        {
                                        new SqlParameter("@user_no", UserNo),
                                        new SqlParameter("@staff_code",
                                            staff_code),
                                        new SqlParameter("@id_card", id_card),
                                        new SqlParameter("@staff_name",
                                            staff_name),
                                        new SqlParameter("@status", "A"),
                                        new SqlParameter("@title_id", title_id),
                                        new SqlParameter("@logon_id", logon_id),
                                        new SqlParameter("@pacii_id", ""),
                                        new SqlParameter("@team_code",
                                            team_code),
                                        new SqlParameter("@email", email),
                                        new SqlParameter("@authority", 3),
                                        new SqlParameter("@join_date",
                                            dtteam_effective_date),
                                        new SqlParameter("@term_date",
                                            DBNull.Value),
                                        new SqlParameter("@is_finance", "N"),
                                        new SqlParameter("@is_qa", "N"),
                                        new SqlParameter("@extension", ""),
                                        new SqlParameter("@contact_no", ""),
                                        new SqlParameter("@dob", ""),
                                        new SqlParameter("@admin_logon_id",
                                            "SyncJob"),
                                        new SqlParameter("@team_effective_date",
                                            dtteam_effective_date),
                                        new SqlParameter("@cost_center_code",
                                            cost_center_code),
                                        new SqlParameter("@pacii_dept_code",
                                            locationDictionary[asPACII_DEPT_CODE ]),
                                        new SqlParameter("@res_type", resTypeDictionary[resType]),
                                        new SqlParameter("@prj_codes", ""),
                                        new SqlParameter("@chinese_name",
                                            chinese_name),
                                        new SqlParameter("@card_no", ""),
                                        new SqlParameter("@location", location),
                                        new SqlParameter("@hr_title", hr_title),
                                        new SqlParameter("@salutation", Gender),
                                        //new SqlParameter("@seat_type", -1),
                                        new SqlParameter("@erp_received_date",
                                            ""),
                                        new SqlParameter("@erp_register_location",
                                            ""),
                                        new SqlParameter("@building_card_no",
                                            "1234")
                                    };
                                    #endregion


                                    //暂时注释掉
                                    DataTable insertMesg =
                                        Helper
                                            .runStorageProcess("po_update_staff",
                                            sqlConn,
                                            sqlParameters, systemLogPath + logFileName);

                                    Helper.writeLogs("type 2 END po_update_staff the insertMessage is" + inOrUpData, systemLogPath + logFileName);
                                    if (insertMesg.Rows.Count > 0)
                                    {

                                        switch (insertMesg.Rows[0]["return_code"].ToString())
                                        {

                                            case "-10": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Save failed. Staff code is duplicated with another active staff.", systemLogPath + logFileName); break;
                                            case "-2 ": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Save failed. Cannot change team as staff's daily entry data is in weekly approval processing. Please try again after weekend.", systemLogPath + logFileName); break;
                                            case "-3 ": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Save failed. Cannot change staff's information as his data is in weekly approval processing. Please try again after weekend.", systemLogPath + logFileName); break;
                                            case "-1": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Error: Save failed.<br>The team effective date of current team should be later than the team effective date of previous team. Please change the team effective date.", systemLogPath + logFileName); break;
                                            case "-4": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Error: Save failed.<br>Cannot change cost center in month-end processing period. Please try again after month-end.", systemLogPath + logFileName); break;
                                            case "-5": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Error: Save failed.<br>Cannot change title which leads charge rate change in month-end processing period. Please try again after month-end.", systemLogPath + logFileName); break;
                                            case "-6": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Error: Save failed.<br>There's daily entry record after The Last Working Day.", systemLogPath + logFileName); break;
                                            case "-7": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Error: Save failed.<br>Cannot transfer this staff because the new project leader can't be assigned by system automatically. Please contact this staff or senior manager to change project leader of related SRs by manual.", systemLogPath + logFileName); break;
                                            case "-8": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Save failed. Role, Cost Center and Office Location don't match.", systemLogPath + logFileName); break;
                                            case "-9": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Save failed. You cannot change the Country of staff who has charges inputted.", systemLogPath + logFileName); break;
                                            case "N": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Warning:Staff name  is duplicated with another active staff.", systemLogPath + logFileName); break;
                                            case "C": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Warning:Staff code  is duplicated with another active staff.", systemLogPath + logFileName); break;
                                            default: Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Successfully saved", systemLogPath + logFileName); break;
                                        }

                                    }
                                    else
                                    {
                                        Helper.writeLogs("Calling stored procedure exception returns an empty object", systemLogPath + logFileName);
                                    }

                                    Console
                                        .WriteLine("Run po_update_staff sp successfully");

                                    //Update record status in SyncStaffToPMA
                                    try
                                    {
                                        ListItem updateItem =
                                            wfSyncStaffToPMAList
                                                .GetItemById(Int32
                                                    .Parse(insertStaff["ID"]
                                                        .ToString()));
                                        if (
                                            insertMesg.Rows.Count > 0 && (
                                        insertMesg.Rows[0]["return_code"].ToString() ==
                                        "C" ||
                                        insertMesg.Rows[0]["return_code"].ToString() ==
                                        "N" || insertMesg.Rows[0]["return_code"].ToString() ==
                                        "")
                                        )
                                        {
                                            updateItem["Status"] = "Updated";
                                            updateItem["PMALog"] =
                                                DateTime
                                                    .Now
                                                    .ToString("MM/dd/yyyy hh:mm tt ") +
                                                "update staff account profile successfully ";
                                        }
                                        else
                                        {
                                            updateItem["Status"] = "Failed";
                                            updateItem["PMALog"] =
                                                DateTime
                                                    .Now
                                                    .ToString("MM/dd/yyyy hh:mm tt ") +
                                                "update staff account profile unsuccessfully ";
                                        }

                                        updateItem.Update();
                                        spContext.ExecuteQuery();
                                    }
                                    catch
                                    {

                                    }
                                }
                                catch
                                {
                                    ListItem updateItem =
                                           wfSyncStaffToPMAList
                                               .GetItemById(Int32
                                                   .Parse(insertStaff["ID"]
                                                       .ToString()));
                                    updateItem["Status"] = "Failed";
                                    updateItem["PMALog"] =
                                        DateTime
                                            .Now
                                            .ToString("MM/dd/yyyy hh:mm tt ") +
                                        "update staff account profile unsuccessfully ";
                                    updateItem.Update();
                                    spContext.ExecuteQuery();
                                }
                            }
                            else
                            {
                                try
                                {
                                    //string UserNo = dt.Rows[0]["User_No"].ToString();
                                    string staff_code =
                                        staffDR["GlobalID"] == null
                                            ? null
                                            : staffDR["GlobalID"].ToString();
                                    string id_card =
                                        staffDR["GlobalID"] == null
                                            ? null
                                            : staffDR["GlobalID"].ToString();
                                    string staff_name =
                                        staffDR["EnglishName"] == null
                                            ? null
                                            : staffDR["EnglishName"].ToString();
                                    int title_id =
                                        Int32
                                            .Parse(staffDR["StaffRole"] == null
                                                ? null
                                                : staffDR["StaffRole"].ToString());
                                    string logon_id =
                                        staffDR["LogOnID"] == null
                                            ? null
                                            : staffDR["LogOnID"].ToString();
                                    int team_code =
                                        Int32
                                            .Parse(staffDR["Team"] == null
                                                ? null
                                                : staffDR["Team"].ToString());
                                    string email =
                                        staffDR["EmailAddress"] == null
                                            ? null
                                            : staffDR["EmailAddress"].ToString();
                                    string cost_center_code =
                                        staffDR["CostCenter"] == null
                                            ? null
                                            : staffDR["CostCenter"].ToString(); //"CN03D102";
                                    string chinese_name =
                                        staffDR["ChineseName"] == null
                                            ? null
                                            : staffDR["ChineseName"].ToString();
                                    int location = -1;
                                    string asPACII_DEPT_CODE = Helper.IsNotNullOrEmpty(staffDR["OfficeLocation"]) ? staffDR["OfficeLocation"].ToString().Substring(3, 2) : "GZ";
                                    string resType = Helper.IsNotNullOrEmpty(staffDR["StaffTypeBase"]) ? staffDR["StaffTypeBase"].ToString().Split("#")[0].ToString() : "01-01";
                                    int hr_title = Helper.IsNotNullOrEmpty(staffDR["BusinessTitle"]) ? int.Parse(staffDR["BusinessTitle"].ToString()) : -1;
                                    int Gender = Helper.IsNotNullOrEmpty(staffDR["Gender"]) ? int.Parse(staffDR["Gender"].ToString().Split("#")[0].ToString()) : 1;

                                    string dtteam_effective_date =
                                        staffDR["EffectiveDate"] == null
                                            ? null
                                            : staffDR["EffectiveDate"].ToString();

                                    SqlParameter[] sqlParameters =
                                        {
                                        new SqlParameter("@asSTAFF_CODE",
                                            staff_code),
                                        new SqlParameter("@asID_CARD", id_card),
                                        new SqlParameter("@asSTAFF_NAME",
                                            staff_name),
                                        new SqlParameter("@asSTATUS", "A"),
                                        new SqlParameter("@anTITLE_ID",
                                            title_id),
                                        new SqlParameter("@asLOGON_ID",
                                            logon_id),
                                        new SqlParameter("@asPACII_ID", ""),
                                        new SqlParameter("@anTEAM_CODE",
                                            team_code),
                                        new SqlParameter("@asEMAIL", email),
                                        new SqlParameter("@asAUTHORITY", 3),
                                        new SqlParameter("@dtJOIN_DATE",
                                            dtteam_effective_date),
                                        new SqlParameter("@dtTERM_DATE",
                                            DBNull.Value),
                                        new SqlParameter("@asIS_FINANCE", "N"),
                                        new SqlParameter("@asIS_QA", "N"),
                                        new SqlParameter("@asEXTENSION", ""),
                                        new SqlParameter("@asCONTACT_NO", ""),
                                        new SqlParameter("@dtteam_effective_date",
                                            dtteam_effective_date),
                                        new SqlParameter("@asDOB", ""),
                                        new SqlParameter("@asADMIN_LOGON_ID",
                                            "SyncJob"),
                                        new SqlParameter("@asCOST_CENTER_CODE",
                                            cost_center_code),
                                        new SqlParameter("@asPACII_DEPT_CODE",
                                            locationDictionary[asPACII_DEPT_CODE ]),
                                        new SqlParameter("@res_type", resTypeDictionary[resType]),
                                        new SqlParameter("@chinese_name",
                                            chinese_name),
                                        new SqlParameter("@card_no", ""),
                                        new SqlParameter("@location", location),
                                        new SqlParameter("@hr_title", hr_title),
                                        new SqlParameter("@salutation", Gender),
                                        //new SqlParameter("@seat_type", -1),
                                        new SqlParameter("@erp_received_date",
                                            ""),
                                        new SqlParameter("@erp_register_location",
                                            ""),
                                        new SqlParameter("@building_card_no",
                                            "1234")
                                    };

                                    DataTable insertMesg =
                                        Helper
                                            .runStorageProcess("po_insert_staff",
                                            sqlConn,
                                            sqlParameters, systemLogPath + logFileName);
                                    if (insertMesg.Rows.Count > 0)
                                    {

                                        switch (insertMesg.Rows[0]["return_code"].ToString())
                                        {


                                            case "-1": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Save failed. Staff code  is duplicated with another active staff.", systemLogPath + logFileName); break;
                                            case "N": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Warning:Staff name  is duplicated with another active staff.", systemLogPath + logFileName); break;
                                            case "C": Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Warning:Staff code  is duplicated with another active staff.", systemLogPath + logFileName); break;

                                            default: Helper.writeLogs("The back messge is  " + insertMesg.Rows[0]["return_code"].ToString() + "Successfully saved", systemLogPath + logFileName); break;
                                        }

                                    }
                                    else
                                    {
                                        Helper.writeLogs("Calling stored procedure exception returns an empty object", systemLogPath + logFileName);
                                    }

                                    Console
                                        .WriteLine("Run po_insert_staff sp successfully");

                                    //Update record status in SyncStaffToPMA
                                    ListItem updateItem =
                                        wfSyncStaffToPMAList
                                            .GetItemById(Int32
                                                .Parse(insertStaff["ID"]
                                                    .ToString()));
                                    try
                                    {
                                        if (
                                           insertMesg.Rows.Count > 0 && (
                                        insertMesg.Rows[0]["return_code"].ToString() ==
                                        "C" ||
                                        insertMesg.Rows[0]["return_code"].ToString() ==
                                        "N" || insertMesg.Rows[0]["return_code"].ToString() ==
                                        "")
                                        )
                                        {
                                            updateItem["Status"] = "Updated";
                                            updateItem["PMALog"] =
                                                DateTime
                                                    .Now
                                                    .ToString("MM/dd/yyyy hh:mm tt ") +
                                                "add staff information successfully ";
                                            updateItem.Update();
                                        }


                                        else
                                        {
                                            updateItem["Status"] = "Failed";
                                            updateItem["PMALog"] =
                                                DateTime
                                                    .Now
                                                    .ToString("MM/dd/yyyy hh:mm tt ") +
                                                "add staff information unsuccessfully ";
                                            updateItem.Update();
                                        }

                                        spContext.ExecuteQuery();
                                    }
                                    catch
                                    {
                                        updateItem["Status"] = "Failed";
                                        updateItem["PMALog"] =
                                            DateTime
                                                .Now
                                                .ToString("MM/dd/yyyy hh:mm tt ") +
                                            "add staff information unsuccessfully ";
                                        updateItem.Update();
                                    }
                                }
                                catch
                                {
                                    ListItem updateItem =
                                      wfSyncStaffToPMAList
                                          .GetItemById(Int32
                                              .Parse(insertStaff["ID"]
                                                  .ToString()));
                                    updateItem["Status"] = "Failed";
                                    updateItem["PMALog"] =
                                        DateTime
                                            .Now
                                            .ToString("MM/dd/yyyy hh:mm tt ") +
                                        "add staff information unsuccessfully ";
                                    updateItem.Update();
                                    spContext.ExecuteQuery();
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine(ex.Message.ToString());
                            continue;
                        }
                    }

                Helper
                    .writeLogs("End to SyncCheckInToPMA Program",
                    systemLogPath + logFileName);
                Helper
                    .UploadFile(spContext,
                    HRDocuments,
                    logFileName,
                    systemLogPath + logFileName);
                spContext.Load(HRWeb);
                spContext.ExecuteQuery();

                //Upload full log file to Library in SharePoint Online

            }
            catch (System.Exception ex)
            {
                Helper
                        .writeLogs("have error :" + ex.Message,
                        systemLogPath + logFileName);
                Helper.uploadLog(
                           spContext,
                           logsDocumentUrl,
                           systemLogPath,
                           logFileName
                       );
                throw;
            }
            finally
            {
                Helper.uploadLog(
                                   spContext,
                                   logsDocumentUrl,
                                   systemLogPath,
                                   logFileName
                               );
            }
        }

        public static void SyncCheckOutJob(IConfigurationRoot config)
        {
            #region init all data and table
            bool isDebug = config["AppSettings:Debug"] == "true";
            string functionName = "SyncCheckOutJob";
            string systemLogPath = config["AppSettings:LogPath"];
            string logFileName =
                functionName +
                "Log" +
                DateTime.Now.ToString("yyyyMMddHHmmss") +
                ".txt";
            DateTime now = DateTime.Now;
            string wfRequestListUrl =
                config["AppSettings:WFCheckOutRequestListUrl"];
            string wfSyncStaffToPMAListUrl =
                config["AppSettings:WFSyncStaffToPMAListUrl"];
            string logsDocumentUrl = config["AppSettings:LogsDocumentUrl"];
            string akvSQLSecret = config["AppSettings:AKVSQLSecret"];
            string sqlConn = config["AppSettings:SQLConnection"];
            string HRDocuments = config["AppSettings:HRDocuments"];
            string AKVName = config["AppSettings:AKVName"];
            string HRSiteUrl = config["AppSettings:HRSiteUrl"];
            string HRAppId = config["AppSettings:HRAppId"];
            string HRAKVAppSecret = config["AppSettings:HRAKVAppSecret"];
            string HRAppSecret =
                isDebug
                    ? config["AppSettings:HRAppSecret"]
                    : Helper.GetAKVSecret(AKVName, HRAKVAppSecret);

            Helper
                .writeLogs("Start to " + functionName,
                systemLogPath + logFileName);
            Helper
                         .writeLogs("Start to context HRSite",
                         systemLogPath + logFileName);
            //Get CheckOutWFRequest ListItemCollection from SharePoint Online site
            ClientContext spContext =
                Helper.GetAppCtx(HRSiteUrl, HRAppId, HRAppSecret);

            try
            {
                Web HRWeb = spContext.Web;
                List wfRequestList = HRWeb.GetListByUrl(wfRequestListUrl);
                List wfSyncStaffToPMAList =
                    HRWeb.GetListByUrl(wfSyncStaffToPMAListUrl);

                CamlQuery wfRequestQuery = new CamlQuery();
                wfRequestQuery.ViewXml = @"<View></View>";

                //wfRequestQuery.ViewXml = @"<View>
                //                                <Query>
                //                                   <Where><Eq><FieldRef Name='Status' /><Value Type='Text'>In Progress</Value></Eq></Where>
                //                                </Query>
                //                          </View>";
                ListItemCollection wfRequestItems =
                    wfRequestList.GetItems(wfRequestQuery);

                CamlQuery wfSyncStaffToPMAListQuery = new CamlQuery();
                wfSyncStaffToPMAListQuery.ViewXml =
                    @"<View>
                                                        <Query>
                                                              <Where>
                                                              <And>
                                                                  <And>
                                                                     <Eq>
                                                                        <FieldRef Name='WFType' />
                                                                        <Value Type='Text'>3</Value>
                                                                     </Eq>
                                                                     <IsNull>
                                                                        <FieldRef Name='Status' />
                                                                     </IsNull>
                                                                  </And>
                                                                    <Leq><FieldRef Name='Modified' /><Value Type='DateTime'>" +
                          now.AddMinutes(-10).ToString("o") +
                          @"</Value></Leq>

                                                                  </And>
                                                               </Where>
                                                        </Query>
                                                  </View>";
                ListItemCollection wfSyncStaffToPMAListItems =
                    wfSyncStaffToPMAList.GetItems(wfSyncStaffToPMAListQuery);

                spContext
                    .Load(wfRequestItems,
                    items =>
                        items
                            .Include(item => item.Id,
                            item => item["RequestorEmail"],
                            item => item["LogOnID"],
                            item => item["LastWorkingDate"]));

                spContext
                    .Load(wfSyncStaffToPMAListItems,
                    items =>
                        items
                            .Include(item => item.Id,
                            item => item["FormID"],
                            item => item["WFType"],
                            item => item["Status"]));

                spContext.ExecuteQuery();

                //Init WFRequest Table
                DataTable wfRequestTable = new DataTable();
                wfRequestTable.Columns.Add("ID");
                wfRequestTable.Columns.Add("RequestorEmail");
                wfRequestTable.Columns.Add("LastWorkingDate");
                wfRequestTable.Columns.Add("LogOnID");

                try
                {
                    foreach (ListItem wfrequest in wfRequestItems)
                    {
                        DataRow wfrequestRow = wfRequestTable.NewRow();
                        wfrequestRow["ID"] = wfrequest.Id;
                        wfrequestRow["RequestorEmail"] =
                            wfrequest["RequestorEmail"];
                        wfrequestRow["LastWorkingDate"] =
                            wfrequest["LastWorkingDate"] == null
                                ? ""
                                : DateTime
                                    .Parse(Convert.ToDateTime(wfrequest["LastWorkingDate"].ToString()).AddHours(8).ToString())
                                    .ToString("MM/dd/yyyy");
                        wfrequestRow["LogOnID"] = wfrequest["LogOnID"];
                        wfRequestTable.Rows.Add(wfrequestRow);
                    }
                }
                catch
                {
                    Helper
                        .writeLogs("Error to loaded wfRequestTable",
                        systemLogPath + logFileName);
                }

                //Init SyncStaffToPMA Table
                DataTable wfSyncStaffToPMAListTable = new DataTable();
                wfSyncStaffToPMAListTable.Columns.Add("ID");
                wfSyncStaffToPMAListTable.Columns.Add("FormID");
                wfSyncStaffToPMAListTable.Columns.Add("WFType");
                wfSyncStaffToPMAListTable.Columns.Add("Status");

                try
                {
                    foreach (ListItem
                        wfSyncStaffToPMAListItem
                        in
                        wfSyncStaffToPMAListItems
                    )
                    {
                        DataRow wfSyncStaffToPMAListRow =
                            wfSyncStaffToPMAListTable.NewRow();
                        wfSyncStaffToPMAListRow["ID"] = wfSyncStaffToPMAListItem.Id;
                        wfSyncStaffToPMAListRow["FormID"] =
                            wfSyncStaffToPMAListItem["FormID"];
                        wfSyncStaffToPMAListRow["WFType"] =
                            wfSyncStaffToPMAListItem["WFType"];
                        wfSyncStaffToPMAListRow["Status"] =
                            wfSyncStaffToPMAListItem["Status"];
                        wfSyncStaffToPMAListTable.Rows.Add(
                            wfSyncStaffToPMAListRow
                        );
                    }
                }
                catch
                {
                    Helper
                        .writeLogs("Error to loaded wfRequestTable",
                        systemLogPath + logFileName);
                }
                #endregion


                Helper
                    .writeLogs("Finished get SharePoint list date",
                    systemLogPath + logFileName);

                //Terminate PMA Staff Info
                foreach (DataRow
                    insertStaff
                    in
                    wfSyncStaffToPMAListTable.Select("WFType='3'")
                )
                {
                    try
                    {
                        DataRow staffDR =
                            wfRequestTable
                                .Select("ID='" +
                                insertStaff["FormID"].ToString() +
                                "'")[0];
                        string SQLText =
                            string
                                .Format("SELECT User_No FROM tpma_StaffBasic WHERE logon_id='{0}' and status='A'",
                                staffDR["LogOnID"].ToString());
                        Helper
                            .writeLogs("Finished get SQL " + SQLText,
                            systemLogPath + logFileName);

                        DataTable dt = Helper.runSQLCommand(SQLText, sqlConn, null);
                        if (dt.Rows.Count > 0)
                        {
                            try
                            {
                                string UserNo = dt.Rows[0]["User_No"].ToString();
                                string TermDate = staffDR["LastWorkingDate"].ToString();
                                Helper
                                    .writeLogs("Finished get User_No " + UserNo,
                                    systemLogPath + logFileName);
                                Helper
                                    .writeLogs("Finished get LastWorkingDate " +
                                    TermDate,
                                    systemLogPath + logFileName);


                                #region Storage Process INPUT and SqlParameter
                                /*  @user_no                char(10),
                                @term_date              datetime,


                            */
                                Helper.writeLogs("begin the pro named po_upd_staff_last_day,the insert message is user_no: " + UserNo + " term_date : " + TermDate.ToString() + " admin_logon_id: hrjob" + functionName, systemLogPath + logFileName);
                                SqlParameter[] sqlParameters =
                                {
                            new SqlParameter("@user_no", UserNo),
                            new SqlParameter("@term_date", TermDate),
                            new SqlParameter("@admin_logon_id ", "hrjob")
                        };
                                #endregion


                                DataTable insertMesg =
                                    Helper
                                        .runStorageProcess("po_upd_staff_last_day",
                                        sqlConn,
                                        sqlParameters, systemLogPath + logFileName);
                                Helper
                                    .writeLogs("Finished run po_upd_staff_last_day ",
                                    systemLogPath + logFileName);

                                //Update record status in SyncStaffToPMA
                                try
                                {
                                    if (insertMesg != null)
                                    {
                                        string flag =
                                            insertMesg
                                                .Rows[0]["return_code"]
                                                .ToString();
                                        Helper
                                            .writeLogs("Finished run po_upd_staff_last_day return_code " +
                                            flag,
                                            systemLogPath + logFileName);

                                        if (flag == "0")
                                        {
                                            ListItem updateItem =
                                                wfSyncStaffToPMAList
                                                    .GetItemById(Int32
                                                        .Parse(insertStaff["ID"]
                                                            .ToString()));
                                            updateItem["Status"] = "Updated";
                                            updateItem.Update();
                                            spContext.ExecuteQuery();
                                            Helper
                                                .writeLogs("Finished udpate status in SP.",
                                                systemLogPath + logFileName);
                                        }
                                        else if (flag == "-1")
                                        {
                                            ListItem updateItem =
                                                wfSyncStaffToPMAList
                                                    .GetItemById(Int32
                                                        .Parse(insertStaff["ID"]
                                                            .ToString()));
                                            updateItem["Status"] =
                                                "last working date more than daily entry";
                                            updateItem.Update();
                                            spContext.ExecuteQuery();
                                            Helper
                                                .writeLogs("Finished udpate status in SP.",
                                                systemLogPath + logFileName);
                                        }
                                    }
                                }
                                catch
                                {
                                }
                            }
                            catch
                            {
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Helper.writeLogs("error message is " + ex.Message.ToString(), systemLogPath + logFileName);
                        continue;

                    }
                }
                Helper
                    .writeLogs("End to " + functionName,
                    systemLogPath + logFileName);
                Helper
                    .UploadFile(spContext,
                    HRDocuments,
                    logFileName,
                    systemLogPath + logFileName);
                spContext.Load(HRWeb);
                spContext.ExecuteQuery();

                //Upload full log file to Library in SharePoint Online

            }
            catch (Exception ex)
            {
                Helper
               .writeLogs("Have error:" + ex.Message,
               systemLogPath + logFileName);
                Helper.uploadLog(
             spContext,
             logsDocumentUrl,
             systemLogPath,
             logFileName
         );
                throw;
            }
            finally
            {
                Helper.uploadLog(
             spContext,
             logsDocumentUrl,
             systemLogPath,
             logFileName
         );
            }

        }

        public static void SyncStaffFromWD(IConfigurationRoot config)
        {
            #region Init Configure in the program
            bool isDebug = config["AppSettings:Debug"] == "true";
            string wdFilePath = config["AppSettings:WDFilePath"];
            string logsDocumentUrl = config["AppSettings:LogsDocumentUrl"];
            string WDFilesUrl = config["AppSettings:WDFilesUrl"];
            string wdFileName = config["AppSettings:WDFileName"];
            string[] wdFileColumns =
                config["AppSettings:WDFileColumns"].Split(";");
            string systemLogPath = config["AppSettings:LogPath"];
            string logFileName =
                "StaffSyncFromWDLog" +
                DateTime.Now.ToString("yyyyMMddHHmmss") +
                ".txt";
            string currentDate = DateTime.Now.ToString("MM/dd/yyyy");
            string staffListUrl = config["AppSettings:StaffListUrl"];
            string wfRequestAuditListUrl =
                config["AppSettings:WFRequestAuditListUrl"];
            string wfRequestListUrl = config["AppSettings:WFRequestListUrl"];
            string wfCheckOutRequestListUrl =
                config["AppSettings:WFCheckOutRequestListUrl"];
            DataTable mappingDT = getColumnMapping(config);
            DataTable mappingDT2 = getColumnMapping2(config);
            DataTable staffListTable = getPMAStaffList(config);

            // Console.WriteLine(staffListTable.Rows.Count.ToString());
            string AKVName = config["AppSettings:AKVName"];
            string HRSiteUrl = config["AppSettings:HRSiteUrl"];
            string HRAppId = config["AppSettings:HRAppId"];
            string HRAKVAppSecret = config["AppSettings:HRAKVAppSecret"];
            string HRAppSecret =
                isDebug
                    ? config["AppSettings:HRAppSecret"]
                    : Helper.GetAKVSecret(AKVName, HRAKVAppSecret);


            #endregion


            Helper
                .writeLogs("Loaded configure file, Start StaffSyncFromWD program",
                systemLogPath + logFileName);
            #region Init parameters in the program
            DataTable wdStaffTable =
                Helper
                    .getTableFromTXT(wdFilePath +
                    DateTime.Now.ToString("yyyyMMdd") +
                    wdFileName,
                    wdFileColumns);
            Helper
                .writeLogs("Loaded WD table from CSV",
                systemLogPath + logFileName);

            ClientContext spContext =
                Helper.GetAppCtx(HRSiteUrl, HRAppId, HRAppSecret);
            try
            {

                Web HRWeb = spContext.Web;

                List staffList = HRWeb.GetListByUrl(staffListUrl);
                List wfRequestAuditList =
                    HRWeb.GetListByUrl(wfRequestAuditListUrl);
                List wfRequestList = HRWeb.GetListByUrl(wfRequestListUrl);
                List wfCheckOutRequestList =
                    HRWeb.GetListByUrl(wfCheckOutRequestListUrl);

                CamlQuery staffQuery = new CamlQuery();

                //staffQuery.ViewXml = string.Format("<View><Query><Where><Eq><FieldRef Name='Status' /><Value Type='Text'>A</Value></Eq></Where></Query></View>");
                staffQuery.ViewXml = string.Format("<View></View>");
                ListItemCollection staffItems = staffList.GetItems(staffQuery);

                CamlQuery wfRequestQuery = new CamlQuery();
                wfRequestQuery.ViewXml =
                    @"<View><Query><Where><Eq><FieldRef Name='Status' /><Value Type='Text'>In Progress</Value></Eq></Where></Query></View>";
                ListItemCollection wfRequestItems =
                    wfRequestList.GetItems(wfRequestQuery);
                ListItemCollection wfCheckOutRequestItems =
                    wfCheckOutRequestList.GetItems(wfRequestQuery);

                spContext
                    .Load(staffItems,
                    items =>
                        items.Include(item => item.Id, item => item["Title"]));
                spContext
                    .Load(wfRequestItems,
                    items =>
                        items
                            .Include(item => item.Id,
                            item => item["GlobalID"],
                            item => item["EnglishName"],
                            item => item["OfficeLocation"],
                            item => item["CosCenter"],
                            item => item["BusinessTitle"],
                            item => item["EffectiveDate"]));
                spContext
                    .Load(wfCheckOutRequestItems,
                    items =>
                        items
                            .Include(item => item.Id,
                            item => item["GlobalID"],
                            item => item["LastWorkingDate"]));
                spContext.ExecuteQuery();
                Helper
                    .writeLogs("Loaded all list", systemLogPath + logFileName);

                DataTable staffTable = new DataTable();
                staffTable.Columns.Add("ID");
                staffTable.Columns.Add("Title");
                try
                {
                    foreach (ListItem staff in staffItems)
                    {
                        DataRow staffRow = staffTable.NewRow();
                        staffRow["ID"] = staff.Id;
                        staffRow["Title"] = staff["Title"];
                        staffTable.Rows.Add(staffRow);
                    }
                }
                catch
                {
                    Helper
                        .writeLogs("Error to loaded staffTable",
                        systemLogPath + logFileName);
                }

                DataTable wfRequestTable = new DataTable();
                wfRequestTable.Columns.Add("ID");
                wfRequestTable.Columns.Add("GlobalID");
                wfRequestTable.Columns.Add("EffectiveDate");
                wfRequestTable.Columns.Add("EnglishName");
                wfRequestTable.Columns.Add("OfficeLocation");
                wfRequestTable.Columns.Add("CostCenter");
                wfRequestTable.Columns.Add("BusinessTitle");

                try
                {
                    foreach (ListItem wfrequest in wfRequestItems)
                    {
                        DataRow wfrequestRow = wfRequestTable.NewRow();
                        wfrequestRow["ID"] = wfrequest.Id;
                        wfrequestRow["GlobalID"] = wfrequest["GlobalID"];
                        wfrequestRow["EffectiveDate"] =
                            wfrequest["EffectiveDate"];
                        wfrequestRow["EnglishName"] = wfrequest["EnglishName"];
                        wfrequestRow["OfficeLocation"] =
                            wfrequest["OfficeLocation"];
                        wfrequestRow["CostCenter"] = wfrequest["CosCenter"];
                        wfrequestRow["BusinessTitle"] =
                            wfrequest["BusinessTitle"];
                        wfRequestTable.Rows.Add(wfrequestRow);
                    }
                }
                catch
                {
                    Helper
                        .writeLogs("Error to loaded wfRequestTable",
                        systemLogPath + logFileName);
                }

                DataTable wfCheckOutRequestTable = new DataTable();
                wfCheckOutRequestTable.Columns.Add("ID");
                wfCheckOutRequestTable.Columns.Add("GlobalID");
                wfCheckOutRequestTable.Columns.Add("LastWorkingDate");
                try
                {
                    foreach (ListItem
                        wfcheckoutrequest
                        in
                        wfCheckOutRequestItems
                    )
                    {
                        DataRow wfcheckoutrequestRow =
                            wfCheckOutRequestTable.NewRow();
                        wfcheckoutrequestRow["ID"] = wfcheckoutrequest.Id;
                        wfcheckoutrequestRow["GlobalID"] =
                            wfcheckoutrequest["GlobalID"];
                        wfcheckoutrequestRow["LastWorkingDate"] =
                            wfcheckoutrequest["LastWorkingDate"];
                        wfCheckOutRequestTable.Rows.Add(wfcheckoutrequestRow);
                    }
                }
                catch
                {
                    Helper
                        .writeLogs("Error to loaded wfCheckOutRequestTable",
                        systemLogPath + logFileName);

                }

                Helper
                    .writeLogs("Convert all list to table",
                    systemLogPath + logFileName);
                #endregion


                // for (int i = 0; i < 1; i++)
                for (int i = 0; i < wdStaffTable.Rows.Count; i++)
                // for (int i = 100; i < 110; i++)
                {
                    string globalId = "";
                    try
                    {
                        globalId =
                            wdStaffTable.Rows[i]["EmployeeID"].ToString();
                        string v_Title =
                            formatString(wdStaffTable.Rows[i]["EmployeeID"]);
                        string v_LANID =
                            formatString(wdStaffTable.Rows[i]["LANID"]);
                        string v_ChineseName =
                            formatString(wdStaffTable.Rows[i]["EmployeeName"]);
                        string v_Surname =
                            formatString(wdStaffTable.Rows[i]["LastName"]);
                        string v_FirstName =
                            formatString(wdStaffTable.Rows[i]["FirstName"]);
                        string v_PreferredName =
                            formatString(wdStaffTable.Rows[i]["PreferredName"]);
                        string v_StaffStatus =
                            formatString(wdStaffTable
                                .Rows[i]["TerminationStatus"]);
                        string v_Email =
                            formatString(wdStaffTable.Rows[i]["WorkEmail"]);
                        string v_CareerBand =
                            formatString(wdStaffTable.Rows[i]["Grade"]);
                        // CostCenterCode
                        string v_CostCenter =
                            formatString(wdStaffTable
                                .Rows[i]["CostCenterReferenceID"]);
                        string v_WorkLocation =
                            formatString(wdStaffTable.Rows[i]["LocationName"]);
                        string v_StaffType =
                            formatString(wdStaffTable.Rows[i]["EmployeeType"]);
                        string v_IDNumber =
                            formatString(wdStaffTable.Rows[i]["NationalID"]);
                        string v_Company =
                            formatString(wdStaffTable.Rows[i]["CompanyName"]);
                        string v_SBU =
                            formatString(wdStaffTable
                                .Rows[i]["DepartmentName"]);
                        string v_PositionTitle =
                            formatString(wdStaffTable.Rows[i]["BusinessTitle"]);
                        string v_HireDate =
                            formatString(wdStaffTable.Rows[i]["HireDate"]);
                        string v_LastPromotionDate =
                            formatString(wdStaffTable
                                .Rows[i]["LatestJobChangeEffective"]);
                        string v_LastWorkingDay =
                            formatString(wdStaffTable
                                .Rows[i]["TerminationDate"]);
                        string v_OriginalHireDate =
                            formatString(wdStaffTable
                                .Rows[i]["OriginalHireDate"]);
                        string v_ContractStartDate =
                            formatString(wdStaffTable
                                .Rows[i]["ContractStartDate"]);
                        string v_ContractEndDate =
                            formatString(wdStaffTable
                                .Rows[i]["ContractEndDate"]);
                        string v_YrOfServices =
                            formatString(wdStaffTable
                                .Rows[i]["LengthOfServiceInYears"]);
                        string v_Birthday =
                            formatString(wdStaffTable.Rows[i]["DateOfBirth"]);
                        string v_Age =
                            formatString(wdStaffTable.Rows[i]["Age"]);
                        string v_TerminationReason =
                            formatString(wdStaffTable
                                .Rows[i]["TerminationBusinessProcessReason"]);
                        string v_Mobile =
                            formatString(wdStaffTable
                                .Rows[i]["CFLRVMobilePhone"]);
                        string v_EmployeeHireEventCompleteDate =
                            formatString(wdStaffTable
                                .Rows[i]["EmployeeHireEventCompleteDate"]);
                        string v_ContractContingent =
                            formatString(wdStaffTable
                                .Rows[i]["ContractContingent"]);
                        string v_TerminationEmployeeEventCompleteDate =
                            formatString(wdStaffTable
                                .Rows[i]["TerminationEmployeeEventCompleteDate"]);
                        string v_EndContingent =
                            formatString(wdStaffTable.Rows[i]["EndContingent"]);
                        string v_Action = string.Empty;
                        string v_PassProbationDate =
                            formatString(wdStaffTable
                                .Rows[i]["ProbationEndDate"]);
                        string v_EmployedEntity =
                            formatString(wdStaffTable.Rows[i]["CompanyName"]);

                        //string v_SupervisoryOrganization = formatString(wdStaffTable.Rows[i]["SupervisoryOrganization"]);
                        //string v_OrganizationID = formatString(wdStaffTable.Rows[i]["OrganizationID"]);
                        //string v_JobChangedDateTime = formatString(wdStaffTable.Rows[i]["JobChangedDateTime"]);
                        //string v_NationalIDType = formatString(wdStaffTable.Rows[i]["NationalIDType"]);
                        v_CostCenter =
                            getMappingColumn(mappingDT, v_CostCenter);
                        v_PositionTitle =
                            getMappingColumn(mappingDT, v_PositionTitle);
                        v_WorkLocation =
                            getMappingColumn2(mappingDT2, v_WorkLocation);
                        v_EmployedEntity =
                            getMappingColumn2(mappingDT2, v_EmployedEntity);

                        if (
                            v_EmployeeHireEventCompleteDate == currentDate ||
                            v_ContractContingent == currentDate
                        )
                            v_Action = "Check-in";
                        else if (
                            v_TerminationEmployeeEventCompleteDate ==
                            currentDate ||
                            v_EndContingent == currentDate
                        ) v_Action = "Check-out";

                        Helper
                            .writeLogs("Start to migrate the staff, Global:" +
                            globalId,
                            systemLogPath + logFileName);

                        //update staff info if it was existed
                        if (
                            staffTable
                                .Select("Title='" + globalId + "'")
                                .Length >
                            0
                        )
                        {
                            Helper
                                .writeLogs("Start to update staff info:" +
                                globalId,
                                systemLogPath + logFileName);
                            DataRow currentstaffDR =
                                staffTable
                                    .Select("Title='" + globalId + "'")[0];
                            ListItem staffInfo =
                                staffList
                                    .GetItemById(int
                                        .Parse(currentstaffDR["ID"]
                                            .ToString()));
                            staffInfo["Title"] = v_Title;
                            staffInfo["LANID"] = v_LANID;
                            staffInfo["ChineseName"] =
                                formatChineseName(v_ChineseName);
                            staffInfo["Surname"] = v_Surname;
                            staffInfo["FirstName"] = v_FirstName;
                            staffInfo["PreferredName"] = v_PreferredName;
                            staffInfo["Email"] = v_Email;
                            staffInfo["CareerBand"] = v_CareerBand;
                            staffInfo["CostCenter"] = v_CostCenter;
                            staffInfo["WorkLocation"] = v_WorkLocation;
                            staffInfo["StaffType"] = v_StaffType;
                            staffInfo["IDNumber"] = v_IDNumber;
                            staffInfo["Company"] = v_Company;
                            staffInfo["SBU"] = v_SBU;
                            staffInfo["PositionTitle"] = v_PositionTitle;
                            staffInfo["YrOfServices"] = v_YrOfServices;
                            staffInfo["Age"] = v_Age;
                            staffInfo["TerminationReason"] =
                                v_TerminationReason;
                            staffInfo["Mobile"] = v_Mobile;
                            staffInfo["Status"] =
                                v_StaffStatus == "Active" ? "A" : "N";
                            staffInfo["Source"] = "WD";
                            staffInfo["EmployedEntity"] = v_EmployedEntity;

                            if (!string.IsNullOrEmpty(v_HireDate))
                                staffInfo["JoinDate"] = formatDate(v_HireDate);
                            if (!string.IsNullOrEmpty(v_LastWorkingDay))
                                staffInfo["LastWorkingDay"] =
                                    formatDate(v_LastWorkingDay);
                            if (!string.IsNullOrEmpty(v_LastPromotionDate))
                                staffInfo["LastPromotionDate"] =
                                    formatDate(v_LastPromotionDate);
                            if (!string.IsNullOrEmpty(v_OriginalHireDate))
                                staffInfo["OriginalHireDate"] =
                                    formatDate(v_OriginalHireDate);
                            if (!string.IsNullOrEmpty(v_ContractStartDate))
                                staffInfo["ContractStartDate"] =
                                    formatDate(v_ContractStartDate);
                            if (!string.IsNullOrEmpty(v_ContractEndDate))
                                staffInfo["ContractEndDate"] =
                                    formatDate(v_ContractEndDate);
                            if (!string.IsNullOrEmpty(v_Birthday))
                                staffInfo["Birthday"] = formatDate(v_Birthday);
                            if (!string.IsNullOrEmpty(v_Action))
                                staffInfo["action"] = v_Action;
                            if (!string.IsNullOrEmpty(v_PassProbationDate))
                                staffInfo["PassProbationDate"] =
                                    formatDate(v_PassProbationDate);

                            string tlName =
                                getPMAStaffProp(staffListTable,
                                v_LANID,
                                v_Title,
                                "tl_name");
                            if (!string.IsNullOrEmpty(tlName))
                                staffInfo["TeamLeaderName"] = tlName;

                            string tlEmail =
                                getPMAStaffProp(staffListTable,
                                v_LANID,
                                v_Title,
                                "tl_email");
                            if (!string.IsNullOrEmpty(tlEmail))
                                staffInfo["TeamLeaderEmail"] = tlEmail;

                            string supName =
                                getPMAStaffProp(staffListTable,
                                v_LANID,
                                v_Title,
                                "sup_team_name");
                            if (!string.IsNullOrEmpty(supName))
                                staffInfo["SubSBU"] = supName;

                            string sbuName =
                                getPMAStaffProp(staffListTable,
                                v_LANID,
                                v_Title,
                                "sbu_team_name");
                            if (!string.IsNullOrEmpty(sbuName))
                                staffInfo["SBU"] = sbuName;

                            string funcName =
                                getPMAStaffProp(staffListTable,
                                v_LANID,
                                v_Title,
                                "func_name");
                            if (!string.IsNullOrEmpty(funcName))
                                staffInfo["Function"] = funcName;

                            string tmName =
                                getPMAStaffProp(staffListTable,
                                v_LANID,
                                v_Title,
                                "team_name");
                            if (!string.IsNullOrEmpty(tmName))
                                staffInfo["SubSubSBU"] = tmName;

                            staffInfo.Update();
                            spContext.ExecuteQuery();
                            Helper
                                .writeLogs("End to update staff info:" +
                                globalId,
                                systemLogPath + logFileName);

                            //check wfrequest exist, add audit log if true
                            if (
                                wfRequestTable
                                    .Select("GlobalId='" + globalId + "'")
                                    .Length >
                                0
                            )
                            {
                                Helper
                                    .writeLogs("Check to update check in audit info:" +
                                    globalId,
                                    systemLogPath + logFileName);

                                //check if any columns changed
                                DataRow currentWFRequestDR =
                                    wfRequestTable
                                        .Select("GlobalId='" +
                                        globalId +
                                        "'")[0];

                                string updatedType = string.Empty;
                                string ci_requestId =
                                    currentWFRequestDR["ID"] == null
                                        ? ""
                                        : currentWFRequestDR["ID"].ToString();
                                string ci_EffectiveDate = v_HireDate;
                                string ci_EnglishName =
                                    v_FirstName + " " + v_Surname;
                                string ci_OfficeLocation = v_WorkLocation;
                                string ci_CostCenter = v_CostCenter;
                                string ci_BusinessTitle = v_PositionTitle;
                                string ci_originEffectiveDate =
                                    currentWFRequestDR["EffectiveDate"] == null
                                        ? ""
                                        : currentWFRequestDR["EffectiveDate"]
                                            .ToString();
                                string ci_originEnglishName =
                                    currentWFRequestDR["EnglishName"] == null
                                        ? ""
                                        : currentWFRequestDR["EnglishName"]
                                            .ToString();
                                string ci_originOfficeLocation =
                                    currentWFRequestDR["OfficeLocation"] == null
                                        ? ""
                                        : currentWFRequestDR["OfficeLocation"]
                                            .ToString();
                                string ci_originCostCenter =
                                    currentWFRequestDR["CostCenter"] == null
                                        ? ""
                                        : currentWFRequestDR["CostCenter"]
                                            .ToString();
                                string ci_originBusinessTitle =
                                    currentWFRequestDR["BusinessTitle"] == null
                                        ? ""
                                        : currentWFRequestDR["BusinessTitle"]
                                            .ToString();

                                updatedType +=
                                    ci_EffectiveDate !=
                                    currentWFRequestDR["EffectiveDate"]
                                        .ToString()
                                        ? "EffectiveDate;"
                                        : "";
                                updatedType +=
                                    ci_EnglishName !=
                                    currentWFRequestDR["EnglishName"].ToString()
                                        ? "EnglishName;"
                                        : "";
                                updatedType +=
                                    ci_OfficeLocation !=
                                    currentWFRequestDR["OfficeLocation"]
                                        .ToString()
                                        ? "OfficeLocation;"
                                        : "";
                                updatedType +=
                                    ci_CostCenter !=
                                    currentWFRequestDR["CostCenter"].ToString()
                                        ? "CostCenter;"
                                        : "";
                                updatedType +=
                                    ci_BusinessTitle !=
                                    currentWFRequestDR["BusinessTitle"]
                                        .ToString()
                                        ? "BusinessTitle;"
                                        : "";

                                //add audit log
                                if (!string.IsNullOrEmpty(updatedType))
                                {
                                    Helper
                                        .writeLogs("Start to update audit info:" +
                                        globalId,
                                        systemLogPath + logFileName);
                                    insertAuditLog(spContext,
                                    wfRequestAuditList,
                                    updatedType,
                                    ci_originEffectiveDate,
                                    ci_EffectiveDate,
                                    ci_requestId,
                                    "CheckIn",
                                    "EffectiveDate");
                                    insertAuditLog(spContext,
                                    wfRequestAuditList,
                                    updatedType,
                                    ci_originEnglishName.ToString(),
                                    ci_EnglishName,
                                    ci_requestId,
                                    "CheckIn",
                                    "EnglishName");
                                    insertAuditLog(spContext,
                                    wfRequestAuditList,
                                    updatedType,
                                    ci_originOfficeLocation,
                                    ci_OfficeLocation,
                                    ci_requestId,
                                    "CheckIn",
                                    "OfficeLocation");
                                    insertAuditLog(spContext,
                                    wfRequestAuditList,
                                    updatedType,
                                    ci_originCostCenter,
                                    ci_CostCenter,
                                    ci_requestId,
                                    "CheckIn",
                                    "CostCenter");
                                    insertAuditLog(spContext,
                                    wfRequestAuditList,
                                    updatedType,
                                    ci_originBusinessTitle,
                                    ci_BusinessTitle,
                                    ci_requestId,
                                    "CheckIn",
                                    "BusinessTitle");
                                    Helper
                                        .writeLogs("End to update audit info:" +
                                        globalId,
                                        systemLogPath + logFileName);
                                }
                            }

                            //check wfcheckoutrequest exist, add audit log if true
                            if (
                                wfCheckOutRequestTable
                                    .Select("GlobalId='" + globalId + "'")
                                    .Length >
                                0
                            )
                            {
                                Helper
                                    .writeLogs("Check to update check out audit info:" +
                                    globalId,
                                    systemLogPath + logFileName);

                                //check if any columns changed
                                DataRow currentWFCheckOutRequestDR =
                                    wfCheckOutRequestTable
                                        .Select("GlobalId='" +
                                        globalId +
                                        "'")[0];

                                string updatedType = string.Empty;
                                string co_LastWorkingDay = v_LastWorkingDay;
                                string co_originLastWorkingDay =
                                    currentWFCheckOutRequestDR["LastWorkingDate"] ==
                                    null
                                        ? ""
                                        : currentWFCheckOutRequestDR["LastWorkingDate"]
                                            .ToString();
                                string co_RequestId =
                                    currentWFCheckOutRequestDR["ID"] == null
                                        ? ""
                                        : currentWFCheckOutRequestDR["ID"]
                                            .ToString();
                                updatedType +=
                                    co_LastWorkingDay !=
                                    currentWFCheckOutRequestDR["LastWorkingDate"]
                                        .ToString()
                                        ? "LastWorkingDate;"
                                        : "";
                                insertAuditLog(spContext,
                                wfRequestAuditList,
                                updatedType,
                                co_originLastWorkingDay,
                                co_LastWorkingDay,
                                co_RequestId,
                                "CheckOut",
                                "LastWorkingDate");
                            }
                        }
                        else
                        {
                            //add staff info if it wasn't existed, insert staff list
                            Helper
                                .writeLogs("Start to insert staff info:" +
                                globalId,
                                systemLogPath + logFileName);
                            ListItemCreationInformation newStaffInfo =
                                new ListItemCreationInformation();
                            ListItem staffInfo =
                                staffList.AddItem(newStaffInfo);
                            staffInfo["Title"] = v_Title;
                            staffInfo["LANID"] = v_LANID;
                            staffInfo["ChineseName"] =
                                formatChineseName(v_ChineseName);
                            staffInfo["Surname"] = v_Surname;
                            staffInfo["FirstName"] = v_FirstName;
                            staffInfo["PreferredName"] = v_PreferredName;
                            staffInfo["Email"] = v_Email;
                            staffInfo["CareerBand"] = v_CareerBand;
                            staffInfo["CostCenter"] = v_CostCenter;
                            staffInfo["WorkLocation"] = v_WorkLocation;
                            staffInfo["StaffType"] = v_StaffType;
                            staffInfo["IDNumber"] = v_IDNumber;
                            staffInfo["Company"] = v_Company;
                            staffInfo["SBU"] = v_SBU;
                            staffInfo["PositionTitle"] = v_PositionTitle;
                            staffInfo["YrOfServices"] = v_YrOfServices;
                            staffInfo["Age"] = v_Age;
                            staffInfo["TerminationReason"] =
                                v_TerminationReason;
                            staffInfo["Mobile"] = v_Mobile;
                            staffInfo["Status"] =
                                v_StaffStatus == "Active" ? "A" : "N";
                            staffInfo["Source"] = "WD";
                            staffInfo["EmployedEntity"] = v_EmployedEntity;

                            string tlName =
                                getPMAStaffProp(staffListTable,
                                v_LANID,
                                v_Title,
                                "tl_name");
                            if (!string.IsNullOrEmpty(tlName))
                                staffInfo["TeamLeaderName"] = tlName;

                            string tlEmail =
                                getPMAStaffProp(staffListTable,
                                v_LANID,
                                v_Title,
                                "tl_email");
                            if (!string.IsNullOrEmpty(tlEmail))
                                staffInfo["TeamLeaderEmail"] = tlEmail;

                            string supName =
                                getPMAStaffProp(staffListTable,
                                v_LANID,
                                v_Title,
                                "sup_team_name");
                            if (!string.IsNullOrEmpty(supName))
                                staffInfo["SubSBU"] = supName;

                            string sbuName =
                                getPMAStaffProp(staffListTable,
                                v_LANID,
                                v_Title,
                                "sbu_team_name");
                            if (!string.IsNullOrEmpty(sbuName))
                                staffInfo["SBU"] = sbuName;

                            string funcName =
                                getPMAStaffProp(staffListTable,
                                v_LANID,
                                v_Title,
                                "func_name");
                            if (!string.IsNullOrEmpty(funcName))
                                staffInfo["Function"] = funcName;

                            string tmName =
                                getPMAStaffProp(staffListTable,
                                v_LANID,
                                v_Title,
                                "team_name");
                            if (!string.IsNullOrEmpty(tmName))
                                staffInfo["SubSubSBU"] = tmName;

                            if (!string.IsNullOrEmpty(v_HireDate))
                                staffInfo["JoinDate"] = formatDate(v_HireDate);
                            if (!string.IsNullOrEmpty(v_LastWorkingDay))
                                staffInfo["LastWorkingDay"] =
                                    formatDate(v_LastWorkingDay);
                            if (!string.IsNullOrEmpty(v_LastPromotionDate))
                                staffInfo["LastPromotionDate"] =
                                    formatDate(v_LastPromotionDate);
                            if (!string.IsNullOrEmpty(v_OriginalHireDate))
                                staffInfo["OriginalHireDate"] =
                                    formatDate(v_OriginalHireDate);
                            if (!string.IsNullOrEmpty(v_ContractStartDate))
                                staffInfo["ContractStartDate"] =
                                    formatDate(v_ContractStartDate);
                            if (!string.IsNullOrEmpty(v_ContractEndDate))
                                staffInfo["ContractEndDate"] =
                                    formatDate(v_ContractEndDate);
                            if (!string.IsNullOrEmpty(v_Birthday))
                                staffInfo["Birthday"] = formatDate(v_Birthday);
                            if (!string.IsNullOrEmpty(v_Action))
                                staffInfo["action"] = v_Action;
                            if (!string.IsNullOrEmpty(v_PassProbationDate))
                                staffInfo["PassProbationDate"] =
                                    formatDate(v_PassProbationDate);

                            staffInfo.Update();
                            spContext.ExecuteQuery();
                            Helper
                                .writeLogs("End to insert staff info:" +
                                globalId,
                                systemLogPath + logFileName);
                        }
                    }
                    catch (Exception ex)
                    {
                        Helper
                            .writeLogs("Error to update staff info:" + globalId + ex.Message.ToString(),
                            systemLogPath + logFileName);
                        continue;
                    }
                }
                Helper
                    .writeLogs("End StaffSyncFromWD program",
                    systemLogPath + logFileName);
                Helper.uploadLog(
                 spContext,
                 logsDocumentUrl,
                 systemLogPath,
                 logFileName
             );
                //upload wdfile
                Helper.uploadLog(
                 spContext,
                 WDFilesUrl,
                 wdFilePath,
                 DateTime.Now.ToString("yyyyMMdd") +
                 wdFileName
             );
            }
            catch (Exception ex)
            {
                Helper
                    .writeLogs("Error to sync program: " + ex.Message,
                    systemLogPath + logFileName);
                Helper.uploadLog(
        spContext,
        logsDocumentUrl,
        systemLogPath,
        logFileName
    );
                //upload wdfile
                Helper.uploadLog(
                 spContext,
                 WDFilesUrl,
                 wdFilePath,
                 DateTime.Now.ToString("yyyyMMdd") +
                 wdFileName
             );

            }
        }

        public static void SyncTCSFromPMA(IConfigurationRoot config)
        {
            bool isDebug = config["AppSettings:Debug"] == "true";
            string todayString =
                isDebug
                    ? config["AppSettings:SyncTCSFromPMADate"]
                    : DateTime.Now.AddDays(-1).ToString("MM/dd/yyyy");
            Console.WriteLine("the date is:" + todayString);
            string functionName = "SyncTCSFromPMA";
            string systemLogPath = config["AppSettings:LogPath"];
            string logFileName =
                functionName +
                "Log" +
                DateTime.Now.ToString("yyyyMMddHHmmss") +
                ".txt";
            string tcsRecordListUrl = config["AppSettings:TCSRecordListUrl"];
            string sqlConn = config["AppSettings:SQLConnection"];
            string HRDocuments = config["AppSettings:HRDocuments"];

            string AKVName = config["AppSettings:AKVName"];
            string HRSiteUrl = config["AppSettings:HRSiteUrl"];
            string HRAppId = config["AppSettings:HRAppId"];
            string HRAKVAppSecret = config["AppSettings:HRAKVAppSecret"];
            string HRAppSecret =
                isDebug
                    ? config["AppSettings:HRAppSecret"]
                    : Helper.GetAKVSecret(AKVName, HRAKVAppSecret);

            Helper
                .writeLogs("Start to " + functionName,
                systemLogPath + logFileName);

            //Get tcsRecordList ListItemCollection from SharePoint Online site
            ClientContext spContext =
                Helper.GetAppCtx(HRSiteUrl, HRAppId, HRAppSecret);
            Web HRWeb = spContext.Web;
            List tcsRecordList = HRWeb.GetListByUrl(tcsRecordListUrl);
            spContext.Load(tcsRecordList);
            spContext.ExecuteQuery();

            string SQLText =
                string
                    .Format("SELECT TCSTable.StaffName," +
                    "TCSTable.WorkDate_c," +
                    "TCSTable.arrival," +
                    "TCSTable.leave," +
                    "TCSTable.staffcode," +
                    "StaffTable.staff_code," +
                    "StaffTable.res_type," +
                    "StaffTable.User_No," +
                    "StaffTable.email," +
                    "StaffTable.status " +
                    "FROM tpma_checkinout TCSTable " +
                    "LEFT JOIN tpma_StaffBasic StaffTable " +
                    "ON TCSTable.staffcode=StaffTable.staff_code " +
                    "WHERE StaffTable.res_type='09' " +
                    "AND StaffTable.status='A' " +
                    "AND TCSTable.WorkDate_c='{0}' " +
                    "AND TCSTable.arrival is NOT null " +
                    "AND TCSTable.leave is NOT null AND email<>''",
                    todayString);

            DataTable TCSTable = Helper.runSQLCommand(SQLText, sqlConn, null);

            Helper
                .writeLogs("have :" + TCSTable.Rows.Count + "rows need to add",
                systemLogPath + logFileName);
            foreach (DataRow record in TCSTable.Rows)
            {
                string arrival =
                    record["arrival"] == null
                        ? "arrival"
                        : record["arrival"].ToString();
                string leave =
                    record["leave"] == null
                        ? "leave"
                        : record["leave"].ToString();
                string userno =
                    record["User_No"] == null
                        ? ""
                        : record["User_No"].ToString();
                string staffcode =
                    record["staffcode"] == null
                        ? ""
                        : record["staffcode"].ToString().Trim();
                string staffname =
                    record["StaffName"] == null
                        ? ""
                        : record["StaffName"].ToString();
                string email =
                    record["email"] == null ? "" : record["email"].ToString();
                string workdate =
                    record["WorkDate_c"] == null
                        ? ""
                        : record["WorkDate_c"].ToString();
                string workingHours = "";

                if (
                    !string.IsNullOrEmpty(arrival) &&
                    !string.IsNullOrEmpty(leave)
                )
                {
                    DateTime startDate = DateTime.Parse(arrival);
                    Helper
                        .writeLogs("StartDate :" + startDate,
                        systemLogPath + logFileName);
                    DateTime endDate = DateTime.Parse(leave);
                    Helper
                        .writeLogs("EndDate :" + endDate,
                        systemLogPath + logFileName);
                    workingHours =
                        Math
                            .Round((endDate - startDate).TotalHours, 1)
                            .ToString();
                }

                if (
                    !string.IsNullOrEmpty(email) &&
                    !string.IsNullOrEmpty(staffname) &&
                    !string.IsNullOrEmpty(workdate)
                )
                {
                    try
                    {
                        ListItemCreationInformation newRecordInfo =
                            new ListItemCreationInformation();
                        ListItem newRecord =
                            tcsRecordList.AddItem(newRecordInfo);
                        Helper
                            .writeLogs("start add   :" + userno,
                            systemLogPath + logFileName);
                        newRecord["Title"] = userno;
                        newRecord["StaffCode"] = staffcode;
                        newRecord["StaffName"] = staffname;
                        newRecord["Email"] = email;
                        newRecord["WorkDate"] = workdate;
                        newRecord["Arrive"] = arrival;
                        newRecord["Leave"] = leave;
                        newRecord["WorkingHours"] = workingHours;
                        newRecord.Update();
                        spContext.ExecuteQuery();
                    }
                    catch (System.Exception e)
                    {
                        Helper
                            .writeLogs("fail to add   :" +
                            userno +
                            ",the err is :" +
                            e.Message,
                            systemLogPath + logFileName);
                        continue;
                    }
                    Helper
                        .writeLogs("finish add   :" + userno,
                        systemLogPath + logFileName);
                }
            }
            Helper
                .writeLogs("Finish " + functionName,
                systemLogPath + logFileName);

            // byte[] fileArray=Helper.AuthGetFileData(systemLogPath + logFileName);
            Helper
                .UploadFile(spContext,
                HRDocuments,
                logFileName,
                systemLogPath + logFileName);
            spContext.Load(HRWeb);
            spContext.ExecuteQuery();
        }

        public static void SyncTCSFromPMAMonthly(IConfigurationRoot config)
        {
            bool isDebug = config["AppSettings:Debug"] == "true";
            string functionName = "SyncTCSFromPMAMonthly";
            string systemLogPath = config["AppSettings:LogPath"];
            string logFileName =
                functionName +
                "Log" +
                DateTime.Now.ToString("yyyyMMddHHmmss") +
                ".txt";
            string tcsRecordListUrl = config["AppSettings:TCSRecordListUrl"];
            string sqlConn = config["AppSettings:SQLConnection"];
            string HRDocuments = config["AppSettings:HRDocuments"];
            string AKVName = config["AppSettings:AKVName"];
            string HRSiteUrl = config["AppSettings:HRSiteUrl"];
            string HRAppId = config["AppSettings:HRAppId"];
            string HRAKVAppSecret = config["AppSettings:HRAKVAppSecret"];
            string HRAppSecret =
                isDebug
                    ? config["AppSettings:HRAppSecret"]
                    : Helper.GetAKVSecret(AKVName, HRAKVAppSecret);

            Helper
                .writeLogs("Start to " + functionName,
                systemLogPath + logFileName);

            //Get tcsRecordList ListItemCollection from SharePoint Online site
            ClientContext spContext =
                Helper.GetAppCtx(HRSiteUrl, HRAppId, HRAppSecret);
            Web HRWeb = spContext.Web;
            List tcsRecordList = HRWeb.GetListByUrl(tcsRecordListUrl);
            spContext.Load(tcsRecordList);
            spContext.ExecuteQuery();

            string dataQuery =
                config["AppSettings:SyncTCSFromPMAMonthlySQLText"];
            string syncTCSFromPMAMonthlyDebug =
                config["AppSettings:SyncTCSFromPMAMonthlyDebug"];
            Console
                .WriteLine("syncTCSFromPMAMonthlyDebug：" +
                syncTCSFromPMAMonthlyDebug);

            string SQLText =
                string
                    .Format("SELECT TCSTable.StaffName," +
                    "TCSTable.WorkDate_c," +
                    "TCSTable.arrival," +
                    "TCSTable.leave," +
                    "TCSTable.staffcode," +
                    "StaffTable.staff_code," +
                    "StaffTable.res_type," +
                    "StaffTable.User_No," +
                    "StaffTable.email," +
                    "StaffTable.status " +
                    "FROM tpma_checkinout TCSTable " +
                    "LEFT JOIN tpma_StaffBasic StaffTable " +
                    "ON TCSTable.staffcode=StaffTable.staff_code " +
                    "WHERE StaffTable.res_type='09' " +
                    //"AND StaffTable.status='A' " +
                    "{0} " + //AND TCSTable.WorkDate_c>='10/01/2022' AND TCSTable.WorkDate_c<='10/31/2022'
                    "AND (TCSTable.arrival is NOT null OR TCSTable.leave is NOT null) " +
                    "And StaffTable.email <>'' order by StaffTable.staff_name",
                    dataQuery);

            DataTable TCSTable = Helper.runSQLCommand(SQLText, sqlConn, null);

            Console
                .WriteLine("TCSTable.Rows.Count.ToString() : " +
                TCSTable.Rows.Count.ToString());

            foreach (DataRow record in TCSTable.Rows)
            {
                string arrival =
                    record["arrival"] == null
                        ? "arrival"
                        : record["arrival"].ToString();
                string leave =
                    record["leave"] == null
                        ? "leave"
                        : record["leave"].ToString();
                string userno =
                    record["User_No"] == null
                        ? ""
                        : record["User_No"].ToString();
                string staffcode =
                    record["staffcode"] == null
                        ? ""
                        : record["staffcode"].ToString().Trim();
                string staffname =
                    record["StaffName"] == null
                        ? ""
                        : record["StaffName"].ToString();
                string email =
                    record["email"] == null ? "" : record["email"].ToString();
                string workdate =
                    record["WorkDate_c"] == null
                        ? ""
                        : record["WorkDate_c"].ToString();
                string workingHours = "";

                if (
                    !string.IsNullOrEmpty(arrival) &&
                    !string.IsNullOrEmpty(leave)
                )
                {
                    DateTime startDate = DateTime.Parse(arrival);
                    DateTime endDate = DateTime.Parse(leave);
                    workingHours =
                        Math
                            .Round((endDate - startDate).TotalHours, 1)
                            .ToString();
                }

                if (
                    !string.IsNullOrEmpty(email) &&
                    !string.IsNullOrEmpty(staffname) &&
                    !string.IsNullOrEmpty(workdate)
                )
                {
                    ListItemCreationInformation newRecordInfo =
                        new ListItemCreationInformation();
                    ListItem newRecord = tcsRecordList.AddItem(newRecordInfo);
                    newRecord["Title"] = userno;
                    newRecord["StaffCode"] = staffcode;
                    newRecord["StaffName"] = staffname;
                    newRecord["Email"] = email;
                    newRecord["WorkDate"] = workdate;
                    newRecord["Arrive"] = arrival;
                    newRecord["Leave"] = leave;
                    newRecord["WorkingHours"] = workingHours;
                    newRecord.Update();
                    spContext.ExecuteQuery();
                }
                if (syncTCSFromPMAMonthlyDebug == "true") break;
            }
        }

        // terminal staff
        public static void SyncUpdatePMA(IConfigurationRoot config)
        {
            bool isDebug = config["AppSettings:Debug"] == "true";
            string functionName = "SyncUpdatePMA";
            string systemLogPath = config["AppSettings:LogPath"];
            string logFileName =
                "SyncUpdatePMALog" +
                DateTime.Now.ToString("yyyyMMddHHmmss") +
                ".txt";
            DateTime now = DateTime.Now;
            string wfRequestListUrl = config["AppSettings:WFRequestListUrl"];
            string wfSyncStaffToPMAListUrl =
                config["AppSettings:WFSyncStaffToPMAListUrl"];
            string logsDocumentUrl = config["AppSettings:LogsDocumentUrl"];
            string sqlConn = config["AppSettings:SQLConnection"];
            string HRDocuments = config["AppSettings:HRDocuments"];

            string AKVName = config["AppSettings:AKVName"];
            string HRSiteUrl = config["AppSettings:HRSiteUrl"];
            string HRAppId = config["AppSettings:HRAppId"];
            string HRAKVAppSecret = config["AppSettings:HRAKVAppSecret"];
            string HRAppSecret =
                isDebug
                    ? config["AppSettings:HRAppSecret"]
                    : Helper.GetAKVSecret(AKVName, HRAKVAppSecret);

            Helper
                .writeLogs("Start to " + functionName,
                systemLogPath + logFileName);

            //Get WFRequest ListItemCollection from SharePoint Online site
            ClientContext spContext =
                Helper.GetAppCtx(HRSiteUrl, HRAppId, HRAppSecret);

            try
            {
                Web HRWeb = spContext.Web;
                List wfRequestList = HRWeb.GetListByUrl(wfRequestListUrl);
                List wfSyncStaffToPMAList =
                    HRWeb.GetListByUrl(wfSyncStaffToPMAListUrl);

                CamlQuery wfSyncStaffToPMAListQuery = new CamlQuery();
                wfSyncStaffToPMAListQuery.ViewXml =
                    @"<View>
                                                        <Query>
                                                              <Where>
                                                                  <And>
                                                                     <Eq>
                                                                        <FieldRef Name='WFType' />
                                                                        <Value Type='Text'>4</Value>
                                                                     </Eq>

                                                                     <And>
                                                                      <IsNull>
                                                                        <FieldRef Name='Status' />
                                                                     </IsNull>
                                                                    <Leq><FieldRef Name='Modified' /><Value Type='DateTime'>" +
                          now.AddMinutes(-10).ToString("o") +
                          @"</Value></Leq>
                                                                     </And>
                                                                  </And>
                                                               </Where>
                                                        </Query>
                                                  </View>";
                ListItemCollection wfSyncStaffToPMAListItems =
                    wfSyncStaffToPMAList.GetItems(wfSyncStaffToPMAListQuery);
                spContext
                    .Load(wfSyncStaffToPMAListItems,
                    items =>
                        items
                            .Include(item => item.Id,
                            item => item["FormID"],
                            item => item["WFType"],
                            item => item["Status"],
                            item => item["PMALog"]));

                spContext.ExecuteQuery();

                foreach (var item1 in wfSyncStaffToPMAListItems)
                {
                    try
                    {

                        var item2 =
                            wfRequestList
                                .GetItemById(int.Parse(item1["FormID"].ToString()));
                        spContext.Load(item2, item => item["LogOnID"]);
                        spContext.ExecuteQuery();

                        string SQLText =
                            string
                                .Format("SELECT User_No FROM tpma_StaffBasic WHERE logon_id='{0}'and status='A'",
                                item2["LogOnID"].ToString());
                        Helper
                            .writeLogs("Finished get SQL " + SQLText,
                            systemLogPath + logFileName);
                        DataTable dt = Helper.runSQLCommand(SQLText, sqlConn, null);
                        ListItem updateItem =
                            wfSyncStaffToPMAList
                                .GetItemById(Int32.Parse(item1.Id.ToString()));
                        if (dt.Rows.Count > 0)
                        {
                            try
                            {
                                string UserNo = dt.Rows[0]["User_No"].ToString();
                                Console.WriteLine(UserNo);
                                string TermDate = DateTime.Now.ToString("MM/dd/yyyy");
                                Console.WriteLine(TermDate);
                                Helper
                                    .writeLogs("Finished get User_No " + UserNo,
                                    systemLogPath + logFileName);
                                Helper
                                    .writeLogs("Finished get LastWorkingDate " +
                                    TermDate,
                                    systemLogPath + logFileName);


                                #region Storage Process INPUT and SqlParameter
                                /*  @user_no                char(10),
                                @term_date              datetime,
                            */
                                Helper.writeLogs("begin the pro named po_upd_staff_last_day,the insert message is user_no: " + UserNo + " term_date : " + TermDate.ToString() + " admin_logon_id: hrjob" + functionName, systemLogPath + logFileName);
                                SqlParameter[] sqlParameters =
                                {
                            new SqlParameter("@user_no", UserNo),
                            new SqlParameter("@term_date", TermDate),
                            new SqlParameter("@admin_logon_id ", "hrjob")
                        };
                                #endregion


                                DataTable insertMesg =
                                    Helper
                                        .runStorageProcess("po_upd_staff_last_day",
                                        sqlConn,
                                        sqlParameters, systemLogPath + logFileName);
                                Helper
                                    .writeLogs("Finished run po_upd_staff_last_day ",
                                    systemLogPath + logFileName);

                                //Update record status in SyncStaffToPMA
                                try
                                {
                                    string flag =
                                        insertMesg.Rows[0]["return_code"].ToString();

                                    if (flag != null)
                                    {
                                        Helper
                                            .writeLogs("Finished run po_upd_staff_last_day return_code " +
                                            flag,
                                            systemLogPath + logFileName);
                                        if (flag == "0")
                                        {
                                            updateItem["Status"] = "Updated";
                                            updateItem["PMALog"] =
                                                DateTime
                                                    .Now
                                                    .ToString("MM/dd/yyyy hh:mm tt ") +
                                                "remove staff information successfully";
                                            updateItem.Update();
                                            Helper
                                                .writeLogs("Finished udpate status in SP.",
                                                systemLogPath + logFileName);
                                        }
                                        else
                                        {
                                            updateItem["Status"] = "Failed";
                                            updateItem["PMALog"] =
                                                DateTime
                                                    .Now
                                                    .ToString("MM/dd/yyyy hh:mm tt ") +
                                                "remove staff information unsuccessfully";
                                            updateItem.Update();
                                            Helper
                                                .writeLogs("Finished udpate status in SP.",
                                                systemLogPath + logFileName);
                                        }
                                    }
                                    else
                                    {
                                        updateItem["Status"] = "Failed";
                                        updateItem["PMALog"] =
                                            DateTime
                                                .Now
                                                .ToString("MM/dd/yyyy hh:mm tt ") +
                                            "remove staff information unsuccessfully";
                                        updateItem.Update();
                                        Helper
                                            .writeLogs("Finished udpate status in SP.",
                                            systemLogPath + logFileName);
                                    }
                                }
                                catch
                                {
                                }
                            }
                            catch
                            {
                            }
                        }
                        else
                        {
                            updateItem["Status"] = "Failed";
                            updateItem["PMALog"] =
                                DateTime.Now.ToString("MM/dd/yyyy hh:mm tt ") +
                                "remove staff information unsuccessfully";
                            updateItem.Update();
                            Helper
                                .writeLogs("Failed udpate status in SP.because there is no date in db",
                                systemLogPath + logFileName);
                        }
                        spContext.ExecuteQuery();

                    }
                    catch (Exception ex)
                    {
                        Helper.writeLogs("error message is " + ex.Message.ToString(), systemLogPath + logFileName);
                        continue;

                    }

                }

                Helper
                                               .writeLogs("end run the job",
                                               systemLogPath + logFileName);


                Helper
                    .UploadFile(spContext,
                    HRDocuments,
                    logFileName,
                    systemLogPath + logFileName);
                spContext.Load(HRWeb);
                spContext.ExecuteQuery();
            }
            catch (Exception ex)
            {
                Helper.writeLogs("error message is " + ex.Message.ToString(), systemLogPath + logFileName);

            }
            finally
            {
                Helper.uploadLog(
             spContext,
             logsDocumentUrl,
             systemLogPath,
             logFileName
         );
            }

        }

        //TCSFlow
        public static void SyncUpdateRequestFromTCS(IConfigurationRoot config)
        {
            bool isDebug = config["AppSettings:Debug"] == "true";
            string functionName = "SyncUpdateRequestFromTCS";
            string systemLogPath = config["AppSettings:LogPath"];
            string logFileName =
                "SyncUpdateRequestFromTCS" +
                DateTime.Now.ToString("yyyyMMddHHmmss") +
                ".txt";

            string StaffListUrl = config["AppSettings:StaffListUrl"];
            string InternRequestListUrl =
                config["AppSettings:InternRequestListUrl"];
            string InternRecordsListUrl =
                config["AppSettings:InternRecordsListUrl"];
            string HolidayListUrl = config["AppSettings:HolidayListUrl"];
            string TeamInfoListUrl = config["AppSettings:TeamInfoListUrl"];
            string PMAStaffListUrl = config["AppSettings:PMAStaffListUrl"];
            string TCSRecordListUrl = config["AppSettings:TCSRecordListUrl"];
            DateTime endDay = DateTime.Now.AddDays(-1);
            DateTime beginDay =
                Convert
                    .ToDateTime(DateTime
                        .Now
                        .AddMonths(-1)
                        .AddDays(1 - DateTime.Now.Day)
                        .ToString("MM/dd/yyyy"));
            string WorkMonth =
                DateTime
                    .Now
                    .AddMonths(-1)
                    .ToString("yyyy-MM");
                      string WorkMonth2 =
                DateTime
                    .Now.AddDays(-8)
                    .AddMonths(-1)

                    .ToString("yyyy-MM");
                     string WorkMonth3 =
                DateTime
                    .Now.AddDays(-8)
                    .AddMonths(-1)
                     .AddDays(1 - DateTime.Now.AddDays(-8).Day)
                    .ToString("yyyy-MM");
            string FirstWorkMonth =
                DateTime
                    .Now
                    .AddMonths(-1)

                    .ToString("yyyy-MM");
            string year =
                DateTime
                    .Now
                    .AddMonths(-1)

                    .ToString("yyyy");
            string endYear =
                DateTime
                    .Now

                    .ToString("yyyy");
            string beginMonth =
                DateTime
                    .Now
                    .AddMonths(-1)

                    .ToString("MM");
            string endMonth = DateTime.Now.ToString("MM");

            // string beginDate=Convert.ToDateTime(DateTime.Now.AddMonths(-1).AddDays(1 - DateTime.Now.Day).ToString("yyyy-MM-dd 00:00:00"));
            string logsDocumentUrl = config["AppSettings:LogsDocumentUrl"];
            string sqlConn = config["AppSettings:SQLConnection"];
            string HRDocuments = config["AppSettings:HRDocuments"];

            string AKVName = config["AppSettings:AKVName"];
            string HRSiteUrl = config["AppSettings:HRSiteUrl"];
            string HRAppId = config["AppSettings:HRAppId"];
            string HRAKVAppSecret = config["AppSettings:HRAKVAppSecret"];
            string HRAppSecret =
                isDebug
                    ? config["AppSettings:HRAppSecret"]
                    : Helper.GetAKVSecret(AKVName, HRAKVAppSecret);

            string AIATSSSiteUrl = config["AppSettings:AIATSSSiteUrl"];
            string AIATSSAppId = config["AppSettings:AIATSSAppId"];
            string AIATSSAKVAppSecret =
                config["AppSettings:AIATSSAKVAppSecret"];
            string AIATSSAppSecret =
                isDebug
                    ? config["AppSettings:AIATSSAppSecret"]
                    : Helper.GetAKVSecret(AKVName, AIATSSAKVAppSecret);
            string dataQuery =
                config["AppSettings:SyncTCSFromPMAMonthlySQLText"];

            Helper
                .writeLogs("Start to " + functionName,
                systemLogPath + logFileName);
            //Get WFRequest ListItemCollection from SharePoint Online site

            Helper
               .writeLogs("begin to get client from sharepoint list " + functionName,
               systemLogPath + logFileName);
            ClientContext spContext =
                Helper.GetAppCtx(HRSiteUrl, HRAppId, HRAppSecret);
            Web HRWeb = spContext.Web;

            ClientContext AIAContext =
                Helper.GetAppCtx(AIATSSSiteUrl, AIATSSAppId, AIATSSAppSecret);
            Web AIAWeb = AIAContext.Web;

            List StaffList = HRWeb.GetListByUrl(StaffListUrl);

            // 新建或者更新
            List InternRequestList = HRWeb.GetListByUrl(InternRequestListUrl);

            // 合并信息
            List InternRecordsList = HRWeb.GetListByUrl(InternRecordsListUrl);
            List HolidayList = HRWeb.GetListByUrl(HolidayListUrl);
            List TeamInfoList = HRWeb.GetListByUrl(TeamInfoListUrl);
            List PMAStaffList = AIAWeb.GetListByUrl(PMAStaffListUrl);
            List TCSRecordList = HRWeb.GetListByUrl(TCSRecordListUrl);
            Helper
               .writeLogs("begin to get client from sharepoint list  " + functionName,
               systemLogPath + logFileName);

            CamlQuery StaffListQuery = new CamlQuery();

            // wfRequestQuery.ViewXml = @"<View></View>";
            CamlQuery TCSRecordListQuery = new CamlQuery();

            CamlQuery TeamInfoListQuery = new CamlQuery();

            //     // wfRequestQuery.ViewXml = @"<View></View>";
            CamlQuery HolidayListQuery = new CamlQuery();
            Helper
               .writeLogs("Start to  get holiday date from sharepoint" + functionName,
               systemLogPath + logFileName);

            try
            {

                // wfRequestQuery.ViewXml = @"<View></View>";
                HolidayListQuery.ViewXml =
                    @"<View><Query><Where><Geq><FieldRef Name='DateDay' /><Value Type='DateTime'>" +
                    beginDay.ToString("o") +
                    @"</Value></Geq></Where></Query></View>";
                ListItemCollection HolidayListItems =
                    HolidayList.GetItems(HolidayListQuery);
                spContext
                    .Load(HolidayListItems,
                    items =>
                        items.Include(item => item.Id, item => item["DateDay"]));
                spContext.ExecuteQuery();

                HolidayListQuery.ViewXml =
                          @"<View><Query><Where><And><Geq><FieldRef Name='DateDay' /><Value Type='DateTime'>" +
                          beginDay.ToString("o") +
                          @"</Value></Geq><Lt><FieldRef Name='DateDay' /><Value Type='DateTime'>" +
                          beginDay.AddMonths(1).ToString("o") +
                          @"</Value></Lt></And></Where></Query></View>";
                ListItemCollection HolidayListItems2 =
                    HolidayList.GetItems(HolidayListQuery);
                spContext
                    .Load(HolidayListItems2,
                    items =>
                        items
                            .Include(item => item.Id,
                            item => item["DateDay"]));
                spContext.ExecuteQuery();
                HolidayListQuery.ViewXml =
                  @"<View><Query><Where><And><Geq><FieldRef Name='DateDay' /><Value Type='DateTime'>" +
                  beginDay.AddMonths(1).ToString("o") +
                  @"</Value></Geq><Lt><FieldRef Name='DateDay' /><Value Type='DateTime'>" +
                  beginDay.AddMonths(2).ToString("o") +
                  @"</Value></Lt></And></Where></Query></View>";
                ListItemCollection HolidayListItems3 =
                    HolidayList.GetItems(HolidayListQuery);
                spContext
                    .Load(HolidayListItems3,
                    items =>
                        items
                            .Include(item => item.Id,
                            item => item["DateDay"]));
                spContext.ExecuteQuery();
                Helper
               .writeLogs("finish to  get holiday date from sharepoint" + functionName,
               systemLogPath + logFileName);
                CamlQuery InternRequestQuery = new CamlQuery();

                // wfRequestQuery.ViewXml = @"<View></View>";
                CamlQuery InternRecordsListQuery = new CamlQuery();

                CamlQuery PMAStaffListQuery = new CamlQuery();
                List<TCSRecord> TCSRecordAllList = new List<TCSRecord>();
                List<InternRecord> InternRecordMap = new List<InternRecord>();
                List<InterRequest> InterRequestMap = new List<InterRequest>();
                List<PMAStaff> PMAStaffMap = new List<PMAStaff>();
                List<Staff> StaffMap = new List<Staff>();
                List<TeamInfo> TeamInfoMap = new List<TeamInfo>();
                List<Holiday> HolidayMap = new List<Holiday>();
                var StaffCodeMap = new HashSet<string>();

                Helper
                               .writeLogs("Start to  get tcs date from db" + functionName,
                               systemLogPath + logFileName);
                // add to test
                // string SQLText = string.Format("SELECT StaffName,WorkDate_c,arrival,leave,staffcode FROM tpma_checkinout WHERE ( WorkDate_c LIKE '" + beginMonth + "/%/" + year + "' OR WorkDate_c LIKE '" + endMonth + "/%/" + year + "') and staffcode ='C3331'");
                // step 1: load interns TCS records from LastMonth to today
                string SQLText =
                    string
                        .Format(
                        "SELECT TCSTable.StaffName," +
                        "TCSTable.WorkDate_c," +
                        "TCSTable.arrival," +
                        "TCSTable.leave," +
                        "TCSTable.staffcode," +
                        "StaffTable.staff_code," +
                        "StaffTable.staff_name," +
                        "StaffTable.res_type," +
                        "StaffTable.team_code," +
                        "StaffTable.User_No," +
                        "StaffTable.email,StaffTable.chinese_name,StaffTable.logon_id," +
                        "StaffTable.status " +
                        "FROM tpma_checkinout TCSTable " +
                        "LEFT JOIN tpma_StaffBasic StaffTable " +
                        "ON TCSTable.staffcode=StaffTable.staff_code " +
                        "WHERE StaffTable.res_type='09' " +
                        "AND StaffTable.status='A' " +
                        "AND (TCSTable.arrival is NOT null OR TCSTable.leave is NOT null) " +
                        "AND ( TCSTable.WorkDate_c LIKE '" +

                        beginMonth +
                        "/%/" +
                        year +
                        "' OR TCSTable.WorkDate_c LIKE '" +
                        endMonth +
                        "/%/" +
                        endYear +
                        "')" +
                        "And StaffTable.email <>'' order by StaffTable.staff_name");
                //   "And TCSTable.staffcode in ('C3331','C3077             ')" +
                //  "And TCSTable.staffcode  ='C3456             '" +
                //  "And TCSTable.staffcode ='C3331'"+
                // string SQLText = string.Format("SELECT StaffName,WorkDate_c,arrival,leave,staffcode FROM tpma_checkinout WHERE  WorkDate_c LIKE '" + beginMonth + "/%/" + year + "' OR WorkDate_c LIKE '" + endMonth + "/%/" + year + "'");
                Helper
                    .writeLogs("Finished get SQL " + SQLText,
                    systemLogPath + logFileName);
                DataTable dt = Helper.runSQLCommand(SQLText, sqlConn, null);
                Helper
                          .writeLogs("finish to  get tcs date from db" + functionName,
                          systemLogPath + logFileName);
                double workingday = 0;
                double NormalWorkingDays = 0;
                double AbnormalWorkingDays = 0;
                double NoAttendanceDays = 0;
                double ActualWorkingDays = 0;
                var WorkMonthSet = new HashSet<string>();
                ListItemCollectionPosition position = null;
                ListItemCollectionPosition PMAPosition = null;
                ListItemCollectionPosition position2 = null;
                int rowLimit = 4000;
                string pagingInfo = null;
                List<ListItem> TCSRecordAll = new List<ListItem>();
                // ADD TO TEST
                List<ListItem> pmaAll = new List<ListItem>();
                PMAStaffListQuery.ViewXml = @"<View Scope='RecursiveAll'><RowLimit Paged='TRUE'>" + rowLimit + "</RowLimit></View>";
                Helper.writeLogs("Start to  get pmaStaff date in  sharepoint" + functionName, systemLogPath + logFileName);
                do
                {

                    ListItemCollection pmaPage = null;
                    PMAStaffListQuery.ListItemCollectionPosition = PMAPosition;
                    pmaPage = PMAStaffList.GetItems(PMAStaffListQuery);
                    AIAContext
                    .Load(pmaPage);

                    AIAContext.ExecuteQuery();

                    // pagingInfo=TCSRecordAllByPage.ListItemCollectionPosition?.PagingInfo;
                    PMAPosition = pmaPage.ListItemCollectionPosition;
                    pmaAll.AddRange(pmaPage.ToList());
                } while (PMAPosition != null);

                // END
                Helper
                          .writeLogs("Start to  get  date in  sharepoint" + functionName,
                          systemLogPath + logFileName);
                Helper
              .writeLogs("Start to  get tcs date in  sharepoint" + functionName,
              systemLogPath + logFileName);
                TCSRecordListQuery.ViewXml = @"<View Scope='RecursiveAll'><RowLimit Paged='TRUE'>" + rowLimit + "</RowLimit></View>";

                do
                {
                    ListItemCollection TCSRecordAllByPage = null;
                    TCSRecordListQuery.ListItemCollectionPosition = position;
                    TCSRecordAllByPage = TCSRecordList.GetItems(TCSRecordListQuery);
                    spContext.Load(TCSRecordAllByPage);
                    spContext.ExecuteQuery();

                    // pagingInfo=TCSRecordAllByPage.ListItemCollectionPosition?.PagingInfo;
                    position = TCSRecordAllByPage.ListItemCollectionPosition;
                    TCSRecordAll.AddRange(TCSRecordAllByPage.ToList());
                } while (position != null);

                List<ListItem> InternRecordAll = new List<ListItem>();

                Helper
                                        .writeLogs("Start to  get InternRecords date in  sharepoint" + functionName,
                                        systemLogPath + logFileName);
                InternRecordsListQuery.ViewXml =
                               @"<View Scope='RecursiveAll'><RowLimit Paged='TRUE'>" + rowLimit + "</RowLimit></View>";
                do
                {
                    ListItemCollection InternRecordAllByPage = null;
                    InternRecordsListQuery.ListItemCollectionPosition = position2;
                    InternRecordAllByPage = InternRecordsList.GetItems(InternRecordsListQuery);
                    spContext
                    .Load(InternRecordAllByPage);

                    spContext.ExecuteQuery();

                    // pagingInfo=TCSRecordAllByPage.ListItemCollectionPosition?.PagingInfo;
                    position2 = InternRecordAllByPage.ListItemCollectionPosition;
                    InternRecordAll.AddRange(InternRecordAllByPage.ToList());
                } while (position2 != null);

                Helper
                                        .writeLogs("Start to  get TeamInfoList date in  sharepoint" + functionName,
                                        systemLogPath + logFileName);
                TeamInfoListQuery.ViewXml =
    @"<View></View>";
                ListItemCollection TeamInfoAll = TeamInfoList.GetItems(TeamInfoListQuery);
                spContext
                    .Load(TeamInfoAll,
                    items =>
                        items
                            .Include(item => item.Id,
                            item => item["FuncCode"],
                            item => item["FuncName"],
                            item => item["SBUCode"],
                            item => item["SupervisorCode"],
                            item => item["SupervisorTeam"],
                            item => item["SBUName"],
                            item => item["TeamCode"],
                            item => item["TeamName"],
                            item => item["Level"],
                            item => item["TeamLeaderName"],
                            item => item["TeamLeaderEmail"]));
                spContext.ExecuteQuery();

                Helper
                                        .writeLogs("Start to  get StaffListQuery date in  sharepoint" + functionName,
                                        systemLogPath + logFileName);
                StaffListQuery.ViewXml =
                                  @"<View></View>";
                ListItemCollection StaffListAll =
                    StaffList.GetItems(StaffListQuery);
                spContext
                    .Load(StaffListAll,
                    items =>
                        items
                            .Include(item => item.Id,
                            item => item["JoinDate"],
                            item => item["Email"],
                            item => item["ContractStartDate"],
                            item => item["ContractEndDate"]));
                spContext.ExecuteQuery();

                foreach (var t in StaffListAll)
                {
                    Staff t1 = new Staff();
                    t1.ID = t.Id;
                    t1.JoinDate = t["JoinDate"] == null ? "" : t["JoinDate"].ToString();
                    t1.Email = t["Email"] == null ? "" : t["Email"].ToString();
                    t1.ContractStartDate = t["ContractStartDate"] == null ? "" : t["ContractStartDate"].ToString();
                    t1.ContractEndDate = t["ContractEndDate"] == null ? "" : t["ContractEndDate"].ToString();



                    StaffMap.Add(t1);

                }
                Helper
                        .writeLogs("Start to  get InternRequestQuery date in  sharepoint" + functionName,
                        systemLogPath + logFileName);

                InternRequestQuery.ViewXml =
                   @"<View>
                                           <Query>
                                              <Where><Or><Eq><FieldRef Name='WorkMonth' /><Value Type='Text'>" +
                   DateTime
                   .Now
                   .ToString("yyyy-MM") +
                   @"</Value></Eq><Eq><FieldRef Name='WorkMonth' /><Value Type='Text'>" +
                   WorkMonth +
                   @"</Value></Eq></Or></Where>
                                           </Query>
                                     </View>";
                ListItemCollection InternRequestAll =
                    InternRequestList.GetItems(InternRequestQuery);
                spContext
                    .Load(InternRequestAll,
                    items =>
                        items
                            .Include(item => item.Id,
                            item => item["InternGlobalID"],
                            item => item["RequestNo"],
                            item => item["InternLanID"],
                            item => item["RequestorName"],
                            item => item["RequestorEmail"],
                            item => item["ChineseName"],
                            item => item["Function"],
                            item => item["FunctionCode"],
                            item => item["SBU"],
                            item => item["SBUCode"],
                            item => item["SubSBU"],
                            item => item["SubSBUCode"],
                            item => item["SubSubSBU"],
                            item => item["SubSubSBUCode"],
                            item => item["TeamLeaderName"],
                            item => item["TeamLeaderEmail"],
                            item => item["WorkMonth"],
                            item => item["ReportMonth"],
                            item => item["ContractStartDate"],
                            item => item["ContractEndDate"],
                            item => item["Status"],
                            item => item["WorkingDays"],
                            item => item["NormalWorkingDays"],
                            item => item["AbnormalWorkingDays"],
                            item => item["NoAttendanceDays"],
                            item => item["ActualWorkingDays"]));
                spContext.ExecuteQuery();

                Helper
                        .writeLogs("Start to  add  date to   InterRequestMap" + functionName,
                        systemLogPath + logFileName);
                foreach (var t in InternRequestAll)
                {
                    InterRequest t1 = new InterRequest();
                    t1.ID = t.Id;
                    t1.InternGlobalID = t["InternGlobalID"] == null ? "" : t["InternGlobalID"].ToString().Trim();
                    t1.RequestNo = t["RequestNo"] == null ? "" : t["RequestNo"].ToString();
                    t1.InternLanID = t["InternLanID"] == null ? "" : t["InternLanID"].ToString();
                    t1.RequestorName = t["RequestorName"] == null ? "" : t["RequestorName"].ToString();
                    t1.RequestorEmail = t["RequestorEmail"] == null ? "" : t["RequestorEmail"].ToString();
                    t1.ChineseName = t["ChineseName"] == null ? "" : t["ChineseName"].ToString();
                    t1.Function = t["Function"] == null ? "" : t["Function"].ToString();
                    t1.FunctionCode = t["FunctionCode"] == null ? "" : t["FunctionCode"].ToString();
                    t1.SBU = t["SBU"] == null ? "" : t["SBU"].ToString();
                    t1.SBUCode = t["SBUCode"] == null ? "" : t["SBUCode"].ToString();
                    t1.SubSBU = t["SubSBU"] == null ? "" : t["SubSBU"].ToString();
                    t1.SubSBUCode = t["SubSBUCode"] == null ? "" : t["SubSBUCode"].ToString();
                    t1.SubSubSBU = t["SubSubSBU"] == null ? "" : t["SubSubSBU"].ToString();
                    t1.SubSubSBUCode = t["SubSubSBUCode"] == null ? "" : t["SubSubSBUCode"].ToString();
                    t1.TeamLeaderName = t["TeamLeaderName"] == null ? "" : t["TeamLeaderName"].ToString();
                    t1.WorkMonth = t["WorkMonth"] == null ? "" : t["WorkMonth"].ToString();
                    t1.TeamLeaderEmail = t["TeamLeaderEmail"] == null ? "" : t["TeamLeaderEmail"].ToString();
                    t1.ReportMonth = t["ReportMonth"] == null ? "" : t["ReportMonth"].ToString();
                    t1.ContractStartDate = t["ContractStartDate"] == null ? "" : t["ContractStartDate"].ToString();
                    t1.ContractEndDate = t["ContractEndDate"] == null ? "" : t["ContractEndDate"].ToString();
                    t1.Status = t["Status"] == null ? "" : t["Status"].ToString();
                    t1.WorkingDays = t["WorkingDays"] == null ? "" : t["WorkingDays"].ToString();
                    t1.NormalWorkingDays = t["NormalWorkingDays"] == null ? "" : t["NormalWorkingDays"].ToString();
                    t1.AbnormalWorkingDays = t["AbnormalWorkingDays"] == null ? "" : t["AbnormalWorkingDays"].ToString();
                    t1.NoAttendanceDays = t["NoAttendanceDays"] == null ? "" : t["NoAttendanceDays"].ToString();
                    t1.ActualWorkingDays = t["ActualWorkingDays"] == null ? "" : t["ActualWorkingDays"].ToString();


                    InterRequestMap.Add(t1);

                }
                Helper
                                       .writeLogs("Start to  add  date to   TeamInfoMap" + functionName,
                                       systemLogPath + logFileName);
                foreach (var t in TeamInfoAll)
                {
                    TeamInfo t1 = new TeamInfo();
                    t1.ID = t.Id;
                    t1.FuncCode = t["FuncCode"] == null ? "" : t["FuncCode"].ToString();
                    t1.FuncName = t["FuncName"] == null ? "" : t["FuncName"].ToString();
                    t1.SBUCode = t["SBUCode"] == null ? "" : t["SBUCode"].ToString();
                    t1.SupervisorCode = t["SupervisorCode"] == null ? "" : t["SupervisorCode"].ToString();
                    t1.SupervisorTeam = t["SupervisorTeam"] == null ? "" : t["SupervisorTeam"].ToString();
                    t1.SBUName = t["SBUName"] == null ? "" : t["SBUName"].ToString();
                    t1.TeamCode = t["TeamCode"] == null ? "" : t["TeamCode"].ToString();
                    t1.TeamName = t["TeamName"] == null ? "" : t["TeamName"].ToString();
                    t1.Level = t["Level"] == null ? "" : t["Level"].ToString();
                    t1.TeamLeaderName = t["TeamLeaderName"] == null ? "" : t["TeamLeaderName"].ToString();
                    t1.TeamLeaderEmail = t["TeamLeaderEmail"] == null ? "" : t["TeamLeaderEmail"].ToString();


                    TeamInfoMap.Add(t1);

                }
                Helper
                                      .writeLogs("Start to  add  date to   InternRecordMap" + functionName,
                                      systemLogPath + logFileName);


                foreach (var t in InternRecordAll)
                {
                    if (Convert.ToDateTime(t["WorkDate"].ToString()).AddHours(8) >= Convert.ToDateTime(beginDay.ToString("o")))
                    {
                        InternRecord t1 = new InternRecord();
                        t1.ID = t.Id;
                        t1.RequestID = t["RequestID"] == null ? "" : t["RequestID"].ToString();
                        t1.InternGlobalID = t["InternGlobalID"] == null ? "" : t["InternGlobalID"].ToString().Trim();
                        t1.WorkDate = t["WorkDate"] == null ? "" : Convert
                                .ToDateTime(t["WorkDate"].ToString()).AddHours(8).ToString("MM/dd/yyyy");
                        t1.PMAArrivalTime = t["PMAArrivalTime"] == null ? "" : t["PMAArrivalTime"].ToString();
                        t1.PMADepartureTime = t["PMADepartureTime"] == null ? "" : t["PMADepartureTime"].ToString();
                        t1.PMAWorkingDay = t["PMAWorkingDay"] == null ? "" : t["PMAWorkingDay"].ToString();

                        InternRecordMap.Add(t1);
                    }


                }
                Helper
                                                   .writeLogs("Start to  add  date to   TCSRecordAllList" + functionName,
                                                   systemLogPath + logFileName);

                foreach (var t in TCSRecordAll)
                {
                    if (Convert.ToDateTime(t["WorkDate"].ToString()).AddHours(8) >= Convert.ToDateTime(beginDay.ToString("o")))
                    {
                        TCSRecord t1 = new TCSRecord();
                        t1.ID = t.Id;
                        t1.Email = t["Email"] == null ? "" : t["Email"].ToString();
                        t1.StaffCode = t["StaffCode"] == null ? "" : t["StaffCode"].ToString().Trim();
                        t1.WorkDate = t["WorkDate"] == null ? "" : Convert.ToDateTime(t["WorkDate"].ToString()).AddHours(8).ToString("MM/dd/yyyy");
                        t1.WorkingHours = t["WorkingHours"] == null ? "" : t["WorkingHours"].ToString();
                        t1.Arrive = t["Arrive"] == null ? "" : t["Arrive"].ToString();
                        t1.Leave = t["Leave"] == null ? "" : t["Leave"].ToString();

                        TCSRecordAllList.Add(t1);
                    }

                }
                foreach (var p in pmaAll)
                {
                    if (Helper.IsNotNullOrEmpty(p["Status"]) && p["Status"].ToString() == "A")
                    {
                        PMAStaff ps = new PMAStaff();
                        ps.ID = p.Id;
                        ps.TeamCode = p["TeamCode"] == null ? "" : p["TeamCode"].ToString();
                        ps.OfficeLocation = p["OfficeLocation"] == null ? "" : p["OfficeLocation"].ToString();
                        ps.Status = p["Status"] == null ? "" : p["Status"].ToString();
                        ps.LANID = p["LANID"] == null ? "" : p["LANID"].ToString();
                        ps.UserCode = p["UserCode"] == null ? "" : p["UserCode"].ToString();
                        ps.ChineseName = p["ChineseName"] == null ? "" : p["ChineseName"].ToString();
                        ps.UserEmail = p["UserEmail"] == null ? "" : p["UserEmail"].ToString();
                        ps.UserName = p["UserName"] == null ? "" : p["UserName"].ToString();
                        PMAStaffMap.Add(ps);
                    }



                }

                Helper
                                                 .writeLogs("Start to  update  date from db to   sharepoint" + functionName,
                                                 systemLogPath + logFileName);
                // step2: loop returned TCS records
                foreach (ListItem H in HolidayListItems)
                {
                    if (H["DateDay"] != null && H["DateDay"].ToString() != "")
                    {
                        Holiday h =
                                              new Holiday()
                                              {
                                                  DateDay = Convert.ToDateTime(H["DateDay"].ToString()).AddHours(8).ToString("MM/dd/yyyy")
                                              };
                        HolidayMap.Add(h);
                    }

                }
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    // step2.1: check if new or update

                    try
                    {
                        // TODO: line 2358 - remove PMAStaffListItems related logic
                        //     // wfRequestQuery.ViewXml = @"<View></View>";
                        //  && dt.Rows[i]["arrival"].ToString() != TCSRecordListItems.First()["Arrive"].ToString() && dt.Rows[i]["leave"].ToString() != TCSRecordListItems.First()["Leave"].ToString()
                        // if need update


                        //add to test
                        var TCSRecordListItems = TCSRecordAllList.FindAll(x =>
                           x.StaffCode == dt.Rows[i]["staffcode"].ToString().Trim() && x.WorkDate == Convert.ToDateTime(dt.Rows[i]["WorkDate_c"]).ToString("MM/dd/yyyy")
                        );
                        var pmaS = PMAStaffMap.FindAll(x => x.UserCode == dt.Rows[i]["staffcode"].ToString());
                        if (pmaS.Count > 0 && pmaS.First().OfficeLocation == "TSS KL")
                        {
                            Helper.writeLogs("This data is from KL pass it ,the staffcode is" + dt.Rows[i]["staffcode"].ToString().Trim(), systemLogPath + logFileName);
                            continue;
                        }


                        if (TCSRecordListItems.Count > 0)
                        {

                            ListItem updateItem = TCSRecordList.GetItemById(TCSRecordListItems.First().ID);
                            spContext.Load(updateItem, item => item.Id,
                                   item => item["StaffCode"],
                                   item => item["Email"],
                                   item => item["WorkDate"],
                                   item => item["WorkingHours"],
                                   item => item["Arrive"],
                                   item => item["Leave"]);
                            spContext.ExecuteQuery();
                            if ((updateItem["Arrive"] != null ? updateItem["Arrive"].ToString() : "") != (dt.Rows[i]["arrival"] != null ? dt.Rows[i]["arrival"].ToString() : "") || (updateItem["Leave"] != null ? updateItem["Leave"].ToString() : "") != (dt.Rows[i]["leave"] != null ? dt.Rows[i]["leave"].ToString() : ""))
                            {
                                Helper
                                                       .writeLogs("Begin to update the StaffCode : " +
                                                       dt.Rows[i]["staffcode"].ToString() +
                                                       " the date is " +
                                                       dt.Rows[i]["WorkDate_c"].ToString() +
                                                       " to sharePoint",
                                                       systemLogPath + logFileName);
                                if (dt.Rows[i]["arrival"] != null && dt.Rows[i]["leave"] != null && dt.Rows[i]["WorkDate_c"] != null)
                                {
                                    updateItem["Arrive"] = dt.Rows[i]["arrival"].ToString();
                                    updateItem["Leave"] = dt.Rows[i]["leave"].ToString();
                                    double hoursDiff = 0;
                                    if (Helper.IsNotNullOrEmpty(dt.Rows[i]["arrival"]) && Helper.IsNotNullOrEmpty(dt.Rows[i]["leave"]))
                                    {
                                        DateTime ar = Convert.ToDateTime(dt.Rows[i]["arrival"].ToString());
                                        DateTime le =
                                            Convert.ToDateTime(dt.Rows[i]["leave"].ToString());
                                        TimeSpan ts = le.Subtract(ar);
                                        hoursDiff = Math.Round(ts.TotalHours, 2);
                                    }

                                    updateItem["WorkingHours"] = hoursDiff;

                                    // int a = DateTime.Compare(Convert.ToDateTime(dt.Rows[i]["arrival"]), Convert.ToDateTime(dt.Rows[i]["leave"]));
                                    updateItem["WorkDate"] = dt.Rows[i]["WorkDate_c"];
                                    updateItem.Update();
                                    spContext.ExecuteQuery();
                                }

                            }
                            else
                            {
                                Helper
                                .writeLogs("Need't to update the StaffCode : " +
                                dt.Rows[i]["staffcode"].ToString() +
                                " the date is " +
                                dt.Rows[i]["WorkDate_c"].ToString() +
                                " to sharePoint",
                                systemLogPath + logFileName);

                            }

                        }
                        else
                        {
                            // if nedd add
                            Helper
                                .writeLogs("Begin to add the StaffCode : " +
                                dt.Rows[i]["staffcode"].ToString() +
                                " the date is " +
                                dt.Rows[i]["WorkDate_c"].ToString() +
                                " to sharePoint",
                                systemLogPath + logFileName);
                            if (dt.Rows[i]["arrival"] != null && dt.Rows[i]["leave"] != null && dt.Rows[i]["WorkDate_c"] != null && dt.Rows[i]["staffcode"] != null)
                            {
                                ListItemCreationInformation itemCreateInfo =
                                                          new ListItemCreationInformation();
                                ListItem newItem = TCSRecordList.AddItem(itemCreateInfo);

                                newItem["StaffCode"] = dt.Rows[i]["staffcode"].ToString().Trim();
                                newItem["StaffName"] = dt.Rows[i]["StaffName"];
                                newItem["Email"] = dt.Rows[i]["email"];
                                newItem["WorkDate"] = dt.Rows[i]["WorkDate_c"].ToString();
                                string hoursDiff = null;
                                if (Helper.IsNotNullOrEmpty(dt.Rows[i]["arrival"]) && Helper.IsNotNullOrEmpty(dt.Rows[i]["leave"]))
                                {
                                    DateTime ar = Convert.ToDateTime(dt.Rows[i]["arrival"].ToString());
                                    DateTime le =
                                        Convert.ToDateTime(dt.Rows[i]["leave"].ToString());
                                    TimeSpan ts = le.Subtract(ar);
                                    hoursDiff = Math.Round(ts.TotalHours, 2).ToString();
                                }


                                newItem["WorkingHours"] = hoursDiff;
                                newItem["Arrive"] = dt.Rows[i]["arrival"];
                                newItem["Leave"] = dt.Rows[i]["leave"];
                                newItem.Update();
                                spContext.ExecuteQuery();
                            }

                        }


                        var TCS = dt.Rows[i];


                        //ADD TO 

                        StaffCodeMap.Add(TCS["staffcode"].ToString().Trim());

                        Holiday holiday =
                            HolidayMap
                                .Find(x => x.DateDay == TCS["WorkDate_c"].ToString());
                        WorkMonth =
                            Convert
                                .ToDateTime(TCS["WorkDate_c"].ToString())
                                .ToString("yyyy-MM");
                        WorkMonthSet.Add(WorkMonth);



                        //     // wfRequestQuery.ViewXml = @"<View></View>";
                        Helper
                                                      .writeLogs("Begin to find the team and staff  :  teamcode is" +
                                                     TCS["staffcode"].ToString() +
                                                      " the email is " +
                                                      TCS["email"].ToString() +
                                                      " to sharePoint",
                                                      systemLogPath + logFileName);
                        var teamL = TeamInfoMap.FindAll(x => x.TeamCode == TCS["team_code"].ToString());
                        var team = teamL.Count > 0 ? teamL.First() : new TeamInfo();
                        var staffL = StaffMap.FindAll(x => x.Email == TCS["email"].ToString());
                        var staff = staffL.Count > 0 ? staffL.First() : new Staff();
                        if (staff.Email == "")
                        {
                            //     // wfRequestQuery.ViewXml = @"<View></View>";
                            Helper
                                                          .writeLogs("error to find the team and staff  :  email is" +


                                                          TCS["email"].ToString() +
                                                          "  to sharePoint",
                                                          systemLogPath + logFileName);
                            staff.Email = "error";
                        }

                        InternInfo InternItem = new InternInfo();
                        InternItem.GlobalID = TCS["staffcode"].ToString().Trim();
                        InternItem.InternLanID = TCS["logon_id"].ToString();
                        InternItem.UserName = TCS["staff_name"].ToString();
                        InternItem.UserEmail = TCS["email"].ToString();
                        InternItem.ChineseName = TCS["chinese_name"].ToString();
                        InternItem.FunctionCode = team.FuncCode;
                        InternItem.Function = team.FuncName;
                        InternItem.SBUCode = team.SBUCode;
                        InternItem.SBU = team.SBUName;
                        // TODO： intern owned Level 2 or Level 3?  need add condition
                        if (team.Level == "2")
                        {
                            InternItem.SubSBUCode = team.TeamCode;
                            InternItem.SubSBU = team.TeamName;
                        }
                        else
                        {
                            InternItem.SubSBUCode = team.SupervisorCode;
                            InternItem.SubSBU = team.SupervisorTeam;
                        }

                        InternItem.SubSubSBUCode = team.TeamCode;
                        InternItem.SubSubSBU = team.TeamName;
                        InternItem.TeamLeaderName = team.TeamLeaderName;
                        InternItem.TeamLeaderEmail = team.TeamLeaderEmail;
                        InternItem.JoinDate = staff.JoinDate;
                        InternItem.ContractStartDate = staff.ContractStartDate;
                        InternItem.ContractEndDate = staff.ContractEndDate;
                        double wd = 0;
                        string a = null;
                        if (Helper.IsNotNullOrEmpty(TCS["leave"]) && Helper.IsNotNullOrEmpty(TCS["arrival"]))
                        {
                            wd = Math.Round((double)(Convert.ToDateTime(TCS["leave"].ToString()) - Convert.ToDateTime(TCS["arrival"].ToString())).TotalHours, 2);
                            a = "have";
                        }



                        string pmaWorkingday = null;

                        if (wd >= 8.5)
                        {
                            pmaWorkingday = "1";
                        }
                        else if (wd >= 3.75 && wd < 8.5)
                        {
                            pmaWorkingday = "0.5";
                        }
                        else if (wd < 3.75 && a != null)
                        {
                            pmaWorkingday = "0";
                        }


                        var InternRequestItems = InterRequestMap.FindAll(x => x.InternGlobalID == TCS["staffcode"].ToString().Trim() && x.WorkMonth == WorkMonth);
                        if (InternRequestItems.Count > 0)
                        {

                            var InternRequestItem = InternRequestItems.First();

                            if (InternRequestItem.Status.ToString() == "Draft")

                            {

                                // TODO: RequestID as first search condition

                                var InternRecordsListItems = InternRecordMap.FindAll(x => x.RequestID == InternRequestItem.ID.ToString() && x.WorkDate == Convert.ToDateTime(TCS["WorkDate_c"].ToString()).ToString("MM/dd/yyyy"));
                                if (InternRecordsListItems.Count > 0)
                                {
                                    if (InternRecordsListItems.First().PMAArrivalTime != (TCS["arrival"] == null ? "" : TCS["arrival"].ToString()) || InternRecordsListItems.First().PMADepartureTime != (TCS["leave"] == null ? "" : TCS["leave"].ToString()))
                                    {

                                        Helper
                                                                            .writeLogs("HAVE REQUEST, begin to update InternRecords, the staffcode is : " +
                                                                            TCS["staffcode"].ToString() +
                                                                            " AND THE WORKDATE IS" +
                                                                            TCS["WorkDate_c"].ToString() +
                                                                            "to sharePoint",
                                                                            systemLogPath + logFileName);
                                        var internRecords =
                                        InternRecordsList.GetItemById(InternRecordsListItems.First().ID);
                                        internRecords["InternGlobalID"] =
                                            TCS["staffcode"].ToString().Trim();
                                        internRecords["WorkDate"] =
                                            Convert.ToDateTime(TCS["WorkDate_c"]);
                                        internRecords["PMAArrivalTime"] =
                                            TCS["arrival"];
                                        internRecords["PMADepartureTime"] =
                                            TCS["leave"];

                                        // TODO: hours = TCS["leave"] - TCS["arrival"]
                                        internRecords["PMAWorkingDay"] = pmaWorkingday;
                                        internRecords.Update();
                                        spContext.ExecuteQuery();
                                    }
                                    else
                                    {
                                        Helper
                                        .writeLogs("HAVE REQUEST, Need't  to update InternRecords, the staffcode is : " +
                                        TCS["staffcode"].ToString() +
                                        " AND THE WORKDATE IS" +
                                        TCS["WorkDate_c"].ToString() +
                                        "to sharePoint",
                                        systemLogPath + logFileName);
                                    }

                                }
                                else
                                {
                                    Helper
                                        .writeLogs("HAVE REQUEST,begin to ADD InternRecords, the staffcode is : " +
                                        TCS["staffcode"].ToString() +
                                        " AND THE WORKDATE IS" +
                                        TCS["WorkDate_c"].ToString() +
                                        "to sharePoint",
                                        systemLogPath + logFileName);

                                    ListItemCreationInformation RecordsCreateInfo = new ListItemCreationInformation();
                                    ListItem newRecords = InternRecordsList.AddItem(RecordsCreateInfo);
                                    newRecords["RequestID"] = InternRequestItem.ID;
                                    newRecords["InternGlobalID"] = TCS["staffcode"].ToString().Trim();
                                    newRecords["WorkDate"] = Convert.ToDateTime(TCS["WorkDate_c"]);
                                    newRecords["PMAArrivalTime"] = TCS["arrival"];
                                    newRecords["PMADepartureTime"] = TCS["leave"];

                                    // TODO: hours = TCS["leave"] - TCS["arrival"]
                                    newRecords["PMAWorkingDay"] = pmaWorkingday;

                                    newRecords.Update();
                                    spContext.ExecuteQuery();
                                }

                            }

                        }
                        else
                        {

                            Helper
                                .writeLogs("begin to ADD InternReQUEST, the InternGlobalID is : " +
                                TCS["staffcode"].ToString() +
                                " AND THE WorkMonth IS" +
                                WorkMonth +
                                "to sharePoint",
                                systemLogPath + logFileName);

                            ListItemCreationInformation itemCreateInfo = new ListItemCreationInformation();
                            ListItem newItem = InternRequestList.AddItem(itemCreateInfo);

                            newItem["InternGlobalID"] = TCS["staffcode"].ToString().Trim();
                            newItem["RequestNo"] =
                                TCS["staffcode"].ToString().Trim() +
                                "_" +
                                WorkMonth.Replace("-", "");
                            newItem["InternLanID"] = InternItem.InternLanID;
                            newItem["RequestorName"] = InternItem.UserName;
                            newItem["RequestorEmail"] = InternItem.UserEmail;
                            newItem["ChineseName"] = InternItem.ChineseName;
                            newItem["Function"] = InternItem.Function;
                            newItem["FunctionCode"] = InternItem.FunctionCode;
                            newItem["SBU"] = InternItem.SBU;
                            newItem["SBUCode"] = InternItem.SBUCode;
                            newItem["SubSBU"] = InternItem.SubSBU;
                            newItem["SubSBUCode"] = InternItem.SubSBUCode;
                            newItem["SubSubSBU"] = InternItem.SubSubSBU;
                            newItem["SubSubSBUCode"] = InternItem.SubSubSBUCode;
                            newItem["TeamLeaderName"] = InternItem.TeamLeaderName;
                            newItem["TeamLeaderEmail"] = InternItem.TeamLeaderEmail;
                            newItem["WorkMonth"] = WorkMonth;
                            newItem["ReportMonth"] = WorkMonth;
                            if (Helper.IsNotNullOrEmpty(InternItem.ContractStartDate))
                            {
                                newItem["ContractStartDate"] = Convert.ToDateTime(InternItem.ContractStartDate);
                            } 
                            else{
                                 newItem["ContractStartDate"] =null;
                            }
                            if (Helper.IsNotNullOrEmpty(InternItem.ContractEndDate))
                            {
                                newItem["ContractEndDate"] = Convert.ToDateTime(InternItem.ContractEndDate);
                            }else{
                                  newItem["ContractEndDate"] =null;
                            }


                            newItem["Status"] = "Draft";
                            if (WorkMonth == FirstWorkMonth)
                            {
                                newItem["WorkingDays"] =
                                Convert
                                    .ToDateTime(WorkMonth)
                                    .AddMonths(1)
                                    .Subtract(Convert.ToDateTime(WorkMonth))
                                    .Days -
                                HolidayListItems2.Count;

                            }
                            else
                            {
                                newItem["WorkingDays"] =
                                                        Convert
                                                            .ToDateTime(WorkMonth)
                                                            .AddMonths(1)
                                                            .Subtract(Convert.ToDateTime(WorkMonth))
                                                            .Days -
                                                        HolidayListItems3.Count;
                            }

                            newItem["NormalWorkingDays"] = 0;
                            newItem["AbnormalWorkingDays"] = 0;
                            newItem["NoAttendanceDays"] = 0;
                            newItem["ActualWorkingDays"] = 0;
                            // Helper.writeLogs("The new request is : " + newItem.FieldValues.ToString(), systemLogPath + logFileName);
                            newItem.Update();
                            spContext.ExecuteQuery();


                            InternRequestQuery.ViewXml =
                                @"<View>
                                           <Query>
                                              <Where><And><Eq><FieldRef Name='InternGlobalID' /><Value Type='Text'>" +
                                TCS["staffcode"].ToString().Trim() +
                                @"</Value></Eq><Eq><FieldRef Name='WorkMonth' /><Value Type='Text'>" +
                                WorkMonth+
                            @"</Value></Eq></And></Where>
                                           </Query>
                                     </View>";
                            ListItemCollection InternRequestNew =
                                InternRequestList.GetItems(InternRequestQuery);
                            spContext
                                .Load(InternRequestNew,
                                items => items.Include(item => item.Id));
                            spContext.ExecuteQuery();
                            InterRequest t1 = new InterRequest();
                            t1.ID = InternRequestNew.First().Id;
                            t1.InternGlobalID = newItem["InternGlobalID"] == null ? "" : newItem["InternGlobalID"].ToString();
                            t1.RequestNo = newItem["RequestNo"] == null ? "" : newItem["RequestNo"].ToString();
                            t1.InternLanID = newItem["InternLanID"] == null ? "" : newItem["InternLanID"].ToString();
                            t1.RequestorName = newItem["RequestorName"] == null ? "" : newItem["RequestorName"].ToString();
                            t1.RequestorEmail = newItem["RequestorEmail"] == null ? "" : newItem["RequestorEmail"].ToString();
                            t1.ChineseName = newItem["ChineseName"] == null ? "" : newItem["ChineseName"].ToString();
                            t1.Function = newItem["Function"] == null ? "" : newItem["Function"].ToString();
                            t1.FunctionCode = newItem["FunctionCode"] == null ? "" : newItem["FunctionCode"].ToString();
                            t1.SBU = newItem["SBU"] == null ? "" : newItem["SBU"].ToString();
                            t1.SBUCode = newItem["SBUCode"] == null ? "" : newItem["SBUCode"].ToString();
                            t1.SubSBU = newItem["SubSBU"] == null ? "" : newItem["SubSBU"].ToString();
                            t1.SubSBUCode = newItem["SubSBUCode"] == null ? "" : newItem["SubSBUCode"].ToString();
                            t1.SubSubSBU = newItem["SubSubSBU"] == null ? "" : newItem["SubSubSBU"].ToString();
                            t1.SubSubSBUCode = newItem["SubSubSBUCode"] == null ? "" : newItem["SubSubSBUCode"].ToString();
                            t1.TeamLeaderName = newItem["TeamLeaderName"] == null ? "" : newItem["TeamLeaderName"].ToString();
                            t1.WorkMonth = newItem["WorkMonth"] == null ? "" : newItem["WorkMonth"].ToString();
                            t1.TeamLeaderEmail = newItem["TeamLeaderEmail"] == null ? "" : newItem["TeamLeaderEmail"].ToString();
                            t1.ReportMonth = newItem["ReportMonth"] == null ? "" : newItem["ReportMonth"].ToString();
                            
                            t1.ContractStartDate = newItem["ContractStartDate"] == null ? "" : newItem["ContractStartDate"].ToString();
                            t1.ContractEndDate = newItem["ContractEndDate"] == null ? "" : newItem["ContractEndDate"].ToString();
                            t1.Status = newItem["Status"] == null ? "" : newItem["Status"].ToString();
                            t1.WorkingDays = newItem["WorkingDays"] == null ? "" : newItem["WorkingDays"].ToString();
                            t1.NormalWorkingDays = newItem["NormalWorkingDays"] == null ? "" : newItem["NormalWorkingDays"].ToString();
                            t1.AbnormalWorkingDays = newItem["AbnormalWorkingDays"] == null ? "" : newItem["AbnormalWorkingDays"].ToString();
                            t1.NoAttendanceDays = newItem["NoAttendanceDays"] == null ? "" : newItem["NoAttendanceDays"].ToString();
                            t1.ActualWorkingDays = newItem["ActualWorkingDays"] == null ? "" : newItem["ActualWorkingDays"].ToString();
                            InterRequestMap.Add(t1);
                            Helper
                                .writeLogs("DON'T HAVE REQUEST,begin to ADD InternRecords, the staffcode is : " +
                                TCS["staffcode"].ToString() +
                                " AND THE WORKDATE IS" +
                                TCS["WorkDate_c"].ToString() +
                                "to sharePoint",
                                systemLogPath + logFileName);
                            ListItemCreationInformation RecordsCreateInfo =
                                new ListItemCreationInformation();
                            ListItem newRecords =
                                InternRecordsList.AddItem(RecordsCreateInfo);
                            newRecords["RequestID"] = InternRequestNew.First().Id;
                            newRecords["InternGlobalID"] = TCS["staffcode"].ToString().Trim();
                            newRecords["WorkDate"] =
                                Convert.ToDateTime(TCS["WorkDate_c"]);
                            newRecords["PMAArrivalTime"] = TCS["arrival"];
                            newRecords["PMADepartureTime"] = TCS["leave"];
                            newRecords["PMAWorkingDay"] = pmaWorkingday;

                            newRecords.Update();
                            spContext.ExecuteQuery();

                        }
                    }
                    catch (Exception ex)
                    {
                        Helper.writeLogs("HAVE ERROR : " + ex.Message.ToString(),
                             systemLogPath + logFileName);
                        continue;
                    }
                    // ADD END 
                }




                //               if (TCS["WorkingHours"].ToString().ToDouble() >= 8.5)
                //                 {
                //                     workingday = 1;
                //                     NormalWorkingDays = 1;
                //                     ActualWorkingDays = 1;
                //                 }
                //                 else if (TCS["WorkingHours"].ToString().ToDouble() < 8.5 && TCS["WorkingHours"].ToString().ToDouble() >= 3.75)
                //                 {
                //                     workingday = 0.5;
                //                     AbnormalWorkingDays = 1;
                //                     ActualWorkingDays = 0.5;
                //                 }
                //                 else if (TCS["WorkingHours"].ToString().ToDouble() < 3.75)
                //                 {
                //                     AbnormalWorkingDays = 1;
                //                 }
                //                   if (holiday == null && TCS["WorkingHours"].ToString().ToDouble() ==0 )
                //                 {
                // NoAttendanceDays=1;
                //                 }

                ListItemCollectionPosition position3 = null;
                rowLimit = 4000;
                pagingInfo = null;
                Helper
                          .writeLogs("Start to  get  date in  sharepoint" + functionName,
                          systemLogPath + logFileName);


                List<ListItem> InternRecordAll2 = new List<ListItem>();

                Helper
                                        .writeLogs("Start to  get InternRecords date in  sharepoint" + functionName,
                                        systemLogPath + logFileName);
                InternRecordsListQuery.ViewXml =
                               @"<View Scope='RecursiveAll'><RowLimit Paged='TRUE'>" + rowLimit + "</RowLimit></View>";
                do
                {
                    ListItemCollection InternRecordAllByPage = null;
                    InternRecordsListQuery.ListItemCollectionPosition = position3;
                    InternRecordAllByPage = InternRecordsList.GetItems(InternRecordsListQuery);
                    spContext
                    .Load(InternRecordAllByPage);

                    spContext.ExecuteQuery();

                    // pagingInfo=TCSRecordAllByPage.ListItemCollectionPosition?.PagingInfo;
                    position3 = InternRecordAllByPage.ListItemCollectionPosition;
                    InternRecordAll2.AddRange(InternRecordAllByPage.ToList());
                } while (position3 != null);
                List<InternRecord> InternRecordMap2 = new List<InternRecord>();
                foreach (var t in InternRecordAll2)
                {
                    if (Convert.ToDateTime(t["WorkDate"].ToString()).AddHours(8) >= Convert.ToDateTime(beginDay.ToString("o")))
                    {
                        InternRecord t1 = new InternRecord();
                        t1.ID = t.Id;
                        t1.RequestID = t["RequestID"] == null ? "" : t["RequestID"].ToString();
                        t1.InternGlobalID = t["InternGlobalID"] == null ? "" : t["InternGlobalID"].ToString().Trim();
                        t1.WorkDate = t["WorkDate"] == null ? "" : Convert
                                .ToDateTime(t["WorkDate"].ToString()).AddHours(8).ToString("MM/dd/yyyy");
                        t1.PMAArrivalTime = t["PMAArrivalTime"] == null ? "" : t["PMAArrivalTime"].ToString();
                        t1.PMADepartureTime = t["PMADepartureTime"] == null ? "" : t["PMADepartureTime"].ToString();
                        t1.ArrivalTime = t["ArrivalTime"] == null ? "" : t["ArrivalTime"].ToString();
                        t1.DepartureTime = t["DepartureTime"] == null ? "" : t["DepartureTime"].ToString();
                        t1.PMAWorkingDay = t["PMAWorkingDay"] == null ? "" : t["PMAWorkingDay"].ToString();

                        InternRecordMap2.Add(t1);
                    }


                }
                // TODO : first query intern request by work month -> search InternRecords by requestID -> calculate XXworkingDays then update
                Helper.writeLogs("Start to  count  date from db to   sharepoint" + functionName,
                                               systemLogPath + logFileName);
                foreach (var WK in WorkMonthSet)
                {
                    foreach (var code in StaffCodeMap)
                    {
                        try
                        {
                            workingday = 0;

                            // TODO: declare variable
                            NormalWorkingDays = 0;
                            AbnormalWorkingDays = 0;
                            NoAttendanceDays = 0;
                            ActualWorkingDays = 0;

                            double actWorkingHours = 0;
                            int notHolidayCount = 0;

                            InternRequestQuery.ViewXml =
                       @"<View><Query><Where><And><And><Eq><FieldRef Name='InternGlobalID' /><Value Type='Text'>" + code + @"</Value></Eq><Eq><FieldRef Name='WorkMonth' /><Value Type='Text'>" + WK + @"</Value></Eq></And><Eq><FieldRef Name='Status' /><Value Type='Text'>Draft</Value></Eq></And></Where></Query></View>";

                            ListItemCollection IRL =
                                InternRequestList.GetItems(InternRequestQuery);
                            spContext
                                .Load(IRL,
                                items => items.Include(item => item.Id,
                                        item => item["InternGlobalID"],
                                        item => item["RequestNo"],
                                        item => item["InternLanID"],
                                        item => item["RequestorName"],
                                        item => item["RequestorEmail"],
                                        item => item["ChineseName"],
                                        item => item["Function"],
                                        item => item["FunctionCode"],
                                        item => item["SBU"],
                                        item => item["SBUCode"],
                                        item => item["SubSBU"],
                                        item => item["SubSBUCode"],
                                        item => item["SubSubSBU"],
                                        item => item["SubSubSBUCode"],
                                        item => item["TeamLeaderName"],
                                        item => item["TeamLeaderEmail"],
                                        item => item["WorkMonth"],
                                        item => item["ReportMonth"],
                                        item => item["ContractStartDate"],
                                        item => item["ContractEndDate"],
                                        item => item["Status"],
                                        item => item["WorkingDays"],
                                        item => item["NormalWorkingDays"],
                                        item => item["AbnormalWorkingDays"],
                                        item => item["NoAttendanceDays"],
                                        item => item["ActualWorkingDays"]));
                            spContext.ExecuteQuery();
                            List<InternRecord> InternRecordsListItems = InternRecordMap2.FindAll(x => x.RequestID == IRL.First().Id.ToString());
                            Helper.writeLogs(" InternRecordsListQuery is : " +
                                                              InternRecordsListQuery.ViewXml.ToString() +
                                                             " on sharePoint",
                                                             systemLogPath + logFileName);
                            Helper.writeLogs("requestID is : " +
                                      IRL.First().Id +
                                     " have records:" +
                                     InternRecordsListItems.Count.ToString() +
                                     " on sharePoint",
                                     systemLogPath + logFileName);
                            foreach (var InternRecord in InternRecordsListItems)
                            {
                                actWorkingHours = 0;

                                Holiday holiday =
                                    HolidayMap
                                        .Find(x => x.DateDay == InternRecord.WorkDate);
                                if (
                                    holiday == null
                                )
                                {
                                    notHolidayCount = notHolidayCount + 1;
                                }
                                var pmaWD = Helper.IsNotNullOrEmpty(InternRecord.PMAWorkingDay) ? InternRecord.PMAWorkingDay.ToString().ToDouble() : 0;
                                if (pmaWD >= 1)
                                {

                                    NormalWorkingDays = NormalWorkingDays + 1;
                                }
                                else if (pmaWD >= 0.5 && pmaWD < 1)
                                {
                                    AbnormalWorkingDays = AbnormalWorkingDays + 1;
                                }
                                else if (pmaWD < 0.5 && (Helper.IsNotNullOrEmpty(InternRecord.PMAArrivalTime) || Helper.IsNotNullOrEmpty(InternRecord.PMADepartureTime)))
                                {

                                    AbnormalWorkingDays = AbnormalWorkingDays + 1;


                                }
                                // 1). PMADepartureTime - ArrivalTime
                                if (
                                   (InternRecord.ArrivalTime != null && InternRecord.ArrivalTime.ToString() != "") &&
                                    (InternRecord.DepartureTime == null || InternRecord.DepartureTime.ToString() == "")
                                )
                                {
                                    actWorkingHours =
                                        (double)(Convert.ToDateTime(InternRecord.PMADepartureTime !=
                                            null
                                                ? InternRecord.PMADepartureTime
                                                    .ToString()
                                                : InternRecord.ArrivalTime
                                                    .ToString()) -
                                        Convert
                                            .ToDateTime(InternRecord.ArrivalTime
                                                .ToString())).TotalHours;
                                }
                                else if (
                                   (InternRecord.ArrivalTime == null || InternRecord.ArrivalTime.ToString() == "") &&
                                    (InternRecord.DepartureTime != null && InternRecord.DepartureTime.ToString() != "")
                                )
                                {

                                    //2). DepartureTime - PMAArrivalTime
                                    actWorkingHours =
                                        (
                                        double
                                        )(Convert
                                            .ToDateTime(InternRecord.DepartureTime
                                                .ToString()) -
                                        Convert
                                            .ToDateTime(InternRecord.PMAArrivalTime !=
                                            null
                                                ? InternRecord.PMAArrivalTime
                                                    .ToString()
                                                : InternRecord.DepartureTime
                                                    .ToString())).TotalHours;
                                }
                                else if (
                                    InternRecord.ArrivalTime != null &&
                                    InternRecord.ArrivalTime.ToString() != "" &&
                                    InternRecord.DepartureTime != null &&
                                    InternRecord.DepartureTime.ToString() != ""
                                )
                                {
                                    // 3). DepartureTime - ArrivalTime
                                    actWorkingHours =
                                        (
                                        double
                                        )(Convert
                                            .ToDateTime(InternRecord.DepartureTime
                                                .ToString()) -
                                        Convert
                                            .ToDateTime(InternRecord.ArrivalTime
                                                .ToString())).TotalHours;
                                }
                                else
                                {
                                    ActualWorkingDays = ActualWorkingDays + (Helper.IsNotNullOrEmpty(InternRecord.PMAWorkingDay) ? InternRecord.PMAWorkingDay.ToString().ToDouble() : 0);
                                }
                                if (actWorkingHours >= 8.5)
                                {
                                    workingday = 1;
                                    ActualWorkingDays = ActualWorkingDays + 1;
                                }
                                else if (actWorkingHours < 8.5 && actWorkingHours >= 3.75)
                                {
                                    workingday = 0.5;
                                    ActualWorkingDays = ActualWorkingDays + 0.5;
                                }
                                Helper
                                  .writeLogs("ActualWorkingDays is : " +
                                  ActualWorkingDays +
                                  " RequestId IS" +
                                  InternRecord.RequestID.ToString() +
                                   " workedate IS" +
                                  InternRecord.WorkDate.ToString() +
                                  " o sharePoint",
                                  systemLogPath + logFileName);
                                // TODO: should be holiday == null && InternRecord.PMAArrivalTime == null && InternRecord.PMADepartureTime == null
                                // Kimi: can be remove it as no place use this value
                                if (
                                   !Helper.IsNotNullOrEmpty(holiday) &&
                                  !Helper.IsNotNullOrEmpty(InternRecord.PMAArrivalTime) &&
                                   !Helper.IsNotNullOrEmpty(InternRecord.PMADepartureTime)
                                )
                                {
                                    NoAttendanceDays = NoAttendanceDays + 1;
                                }
                                if ((InternRecord.ArrivalTime != null && InternRecord.ArrivalTime.ToString() != "") ||
                                   (InternRecord.DepartureTime != null && InternRecord.DepartureTime.ToString() != ""))
                                {
                                    var internRecords =
                                              InternRecordsList.GetItemById(InternRecord.ID);
                                    internRecords["WorkingDay"] = workingday;
                                    internRecords.Update();
                                    spContext.ExecuteQuery();
                                }


                            }
                            var I = IRL.First();
                            Helper
                                .writeLogs("begin to update InternRequests, the Id is : " +
                                I.Id.ToString() +
                                " AND THE WorkMonth IS" +
                                I["WorkMonth"].ToString() +
                                "to sharePoint",
                                systemLogPath + logFileName);

                            I["NormalWorkingDays"] =
                                NormalWorkingDays;
                            I["AbnormalWorkingDays"] =
                                AbnormalWorkingDays;
                            I["NoAttendanceDays"] = NoAttendanceDays;
                            I["ActualWorkingDays"] =
                                ActualWorkingDays;
                            I.Update();
                            spContext.ExecuteQuery();

                        }
                        catch (Exception ex)
                        {
                            Helper.writeLogs("Have error : " +

                             ex.Message.ToString() +
                             " on sharePoint",
                             systemLogPath + logFileName);
                            continue;
                        }
                    }
                }
                //Upload full log file to Library in SharePoint Online
                Helper.uploadLog(
                    spContext,
                    logsDocumentUrl,
                    systemLogPath,
                    logFileName
                );
            }
            catch (System.Exception ex)
            {
                Helper
                         .writeLogs("Have error : " +
                         ex.Message.ToString() +
                         " InnerException is" +
                         ex.InnerException.ToString() +
                         "to sharePoint",
                         systemLogPath + logFileName);
                Helper.uploadLog(
       spContext,
       logsDocumentUrl,
       systemLogPath,
       logFileName
   );
                throw ex;
            }


        }

        public static string formatChineseName(string text)
        {
            try
            {
                if (text.IndexOf("（") > 0 && text.IndexOf("）") > 0)
                {
                    text = text.Split("（")[1];
                    text = text.Split("）")[0];
                }
                return text;
            }
            catch (Exception ex)
            {
                return "";
            }
        }

        public static DateTime formatDate(object obj)
        {
            try
            {
                string text = obj.ToString();
                if (text.Length == 16)
                    text =
                        text.Substring(0, 10) +
                        " " +
                        text.Substring(11, text.Length - 11);

                return DateTime.Parse(text);
            }
            catch (Exception ex)
            {
                return DateTime.Parse("1900-01-01");
            }
        }

        public static string formatEffectiveDate(string str)
        {
            try
            {
                DateTime dt = DateTime.Parse(str);
                return dt.ToString("MM/dd/yyyy");

                //return "";// DateTime.Parse(text);
            }
            catch (Exception ex)
            {
                return "1900-01-01"; // DateTime.Parse("1900-01-01");
            }
        }

        public static string formatString(object obj)
        {
            try
            {
                return obj.ToString();
            }
            catch (Exception ex)
            {
                return "";
            }
        }

        public static DataTable getColumnMapping(IConfigurationRoot config)
        {
            try
            {
                bool isDebug = config["AppSettings:Debug"] == "true";
                string PMACommonListUrl =
                    config["AppSettings:PMACommonListUrl"];

                //string siteUrl = config["AppSettings:AIATSSSiteUrl"];
                //string appId = config["AppSettings:SPPMACommonAppId"];
                //string akvSecret = config["AppSettings:SPPMACommonSecret"];
                //string akvName = "";
                //string appSecret = isDebug ? config["AppSettings:SPCommonSecret"] : Helper.GetAKVSecret(akvName, akvSecret);
                string AKVName = config["AppSettings:AKVName"];
                string AIATSSSiteUrl = config["AppSettings:AIATSSSiteUrl"];
                string AIATSSAppId = config["AppSettings:AIATSSAppId"];
                string AIATSSAKVAppSecret =
                    config["AppSettings:AIATSSAKVAppSecret"];
                string AIATSSAppSecret =
                    isDebug
                        ? config["AppSettings:AIATSSAppSecret"]
                        : Helper.GetAKVSecret(AKVName, AIATSSAKVAppSecret);

                ClientContext aiaTSSContext =
                    Helper
                        .GetAppCtx(AIATSSSiteUrl, AIATSSAppId, AIATSSAppSecret);
                Web AIATSSWeb = aiaTSSContext.Web;
                List mappingList = AIATSSWeb.GetListByUrl(PMACommonListUrl);

                CamlQuery mappingQuery = new CamlQuery();
                mappingQuery.ViewXml =
                    string
                        .Format("<View><Query><Where><Or><Eq><FieldRef Name='Category' /><Value Type='Text'>BusinessTitle</Value></Eq><Eq><FieldRef Name='Category' /><Value Type='Text'>CostCenter</Value></Eq></Or></Where><ViewFields><FieldRef Name='ID' /><FieldRef Name='Category' /><FieldRef Name='Key' /><FieldRef Name='Value' /></ViewFields></Query></View>");
                ListItemCollection mappingItems =
                    mappingList.GetItems(mappingQuery);

                aiaTSSContext
                    .Load(mappingItems,
                    items =>
                        items
                            .Include(item => item.Id,
                            item => item["Category"],
                            item => item["Key"],
                            item => item["Value"]));
                aiaTSSContext.ExecuteQuery();

                DataTable dt = new DataTable();
                dt.Columns.Add("ID");
                dt.Columns.Add("Category");
                dt.Columns.Add("Key");
                dt.Columns.Add("Value");

                foreach (ListItem item in mappingItems)
                {
                    DataRow dr = dt.NewRow();
                    dr["ID"] = item.Id.ToString();
                    dr["Category"] =
                        item["Category"] == null
                            ? ""
                            : item["Category"].ToString();
                    dr["Key"] =
                        item["Key"] == null ? "" : item["Key"].ToString();
                    dr["Value"] =
                        item["Value"] == null ? "" : item["Value"].ToString();
                    dt.Rows.Add(dr);
                }
                return dt;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message.ToString());
                return null;
            }
        }

        public static DataTable getColumnMapping2(IConfigurationRoot config)
        {
            try
            {
                bool isDebug = config["AppSettings:Debug"] == "true";
                string PMAWDMappingListUrl =
                    config["AppSettings:PMAWDMappingListUrl"];

                string AKVName = config["AppSettings:AKVName"];
                string HRSiteUrl = config["AppSettings:HRSiteUrl"];
                string HRAppId = config["AppSettings:HRAppId"];
                string HRAKVAppSecret = config["AppSettings:HRAKVAppSecret"];
                string HRAppSecret =
                    isDebug
                        ? config["AppSettings:HRAppSecret"]
                        : Helper.GetAKVSecret(AKVName, HRAKVAppSecret);

                ClientContext aiaTSSContext =
                    Helper.GetAppCtx(HRSiteUrl, HRAppId, HRAppSecret);
                Web AIATSSWeb = aiaTSSContext.Web;
                List mappingList = AIATSSWeb.GetListByUrl(PMAWDMappingListUrl);

                CamlQuery mappingQuery = new CamlQuery();
                mappingQuery.ViewXml =
                    string.Format("<View><Query></Query></View>");
                ListItemCollection mappingItems =
                    mappingList.GetItems(mappingQuery);

                aiaTSSContext
                    .Load(mappingItems,
                    items =>
                        items
                            .Include(item => item.Id,
                            item => item["Category"],
                            item => item["WDValue"],
                            item => item["HRValue"]));
                aiaTSSContext.ExecuteQuery();

                DataTable dt = new DataTable();
                dt.Columns.Add("ID");
                dt.Columns.Add("Category");
                dt.Columns.Add("WDValue");
                dt.Columns.Add("HRValue");

                foreach (ListItem item in mappingItems)
                {
                    DataRow dr = dt.NewRow();
                    dr["ID"] = item.Id.ToString();
                    dr["Category"] =
                        item["Category"] == null
                            ? ""
                            : item["Category"].ToString();
                    dr["WDValue"] =
                        item["WDValue"] == null
                            ? ""
                            : item["WDValue"].ToString();
                    dr["HRValue"] =
                        item["HRValue"] == null
                            ? ""
                            : item["HRValue"].ToString();
                    dt.Rows.Add(dr);
                }
                return dt;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message.ToString());
                return null;
            }
        }

        public static string getMappingColumn(DataTable dt, string column)
        {
            string result = column;
            try
            {
                if (dt.Select("Value='" + column + "'").Length > 0)
                {
                    DataRow dr = dt.Select("Value='" + column + "'")[0];
                    result =
                        dr["Key"].ToString() + "#;" + dr["Value"].ToString();
                }
                else if (dt.Select("Key='" + column + "'").Length > 0)
                {
                    DataRow dr = dt.Select("Key='" + column + "'")[0];
                    result =
                        dr["Key"].ToString() + "#;" + dr["Value"].ToString();
                }
            }
            catch
            {
            }
            return result;
        }

        public static string getMappingColumn2(DataTable dt, string column)
        {
            string result = column;
            try
            {
                if (dt.Select("WDValue='" + column + "'").Length > 0)
                {
                    DataRow dr = dt.Select("WDValue='" + column + "'")[0];
                    result = dr["HRValue"].ToString();
                }
                else if (dt.Select("WDValue='" + column + "'").Length > 0)
                {
                    DataRow dr = dt.Select("WDValue='" + column + "'")[0];
                    result = dr["HRValue"].ToString();
                }
            }
            catch
            {
            }
            return result;
        }

        public static DataTable getPMAStaffList(IConfigurationRoot config)
        {
            string sqlConn = config["AppSettings:SQLConnection"];
            string SQLText =
                @"SELECT staff.[user_name]
                                    , staff.[user_email]
                                    ,staff.[lan_id]
                                    ,staff.[user_code]
                                    ,team.tl_name
                                    ,team.tl_email
                                    ,team.team_name
                                    ,team.sbu_team_name
                                    ,team.func_name
                                    ,team.[sup_team_name]
                               FROM [db_mos_common_service].[dbo].[vpma_staffbasic_hrauto] staff,[db_mos_common_service].[dbo].[vpma_team] team
                               where staff.team_code = team.team_code and staff.status = 'A'";
            DataTable PMAStaffable =
                Helper.runSQLCommand(SQLText, sqlConn, null);
            return PMAStaffable;
        }

        public static string
        getPMAStaffProp(
            DataTable StaffList,
            string LanId,
            string GId,
            string Prop
        )
        {
            string PropStr = "";
            string selectStr =
                string.Format("lan_id='{0}' and user_code ='{1}'", LanId, GId);
            try
            {
                DataRow[] drs = StaffList.Select(selectStr);
                if (drs.Length > 0)
                {
                    PropStr =
                        drs[0][Prop] == null
                            ? ""
                            : drs[0][Prop].ToString().Trim();
                }
            }
            catch
            {
            }
            return PropStr;
        }

        public static bool
        insertAuditLog(
            ClientContext spContext,
            List wfRequestAuditList,
            string updatedType,
            string originValue,
            string newValue,
            string requestId,
            string type,
            string column
        )
        {
            bool result = false;
            try
            {
                if (updatedType.IndexOf(column) >= 0)
                {
                    ListItemCreationInformation newWFRequestAuditInfo =
                        new ListItemCreationInformation();
                    ListItem newWFRequestAudit =
                        wfRequestAuditList.AddItem(newWFRequestAuditInfo);
                    newWFRequestAudit["Title"] = type;
                    newWFRequestAudit["FieldName"] = column;
                    newWFRequestAudit["OriginalValue"] = originValue;
                    newWFRequestAudit["NewValue"] = newValue;
                    newWFRequestAudit["RequestID"] = requestId;
                    newWFRequestAudit.Update();
                    spContext.ExecuteQuery();
                }
                result = true;
            }
            catch
            {
            }
            return result;
        }

      
        public static void updateUATdate(IConfigurationRoot config)
        {
            ClientContext spContext =
                Helper
                    .GetAppCtx("https://aiacom.sharepoint.com/sites/EFlow365_UAT/HRAutomation",
                    "020deec2-e56c-429f-9a62-e83e92ef7198",
                    "maY+Zsd+cwu8JwUWnTrjgGTPfB8eze+jcKXyYqBOOyk=");
            Web HRWeb = spContext.Web;
            List staffList = HRWeb.GetListByUrl("Lists/StaffInfo");
            CamlQuery query = new CamlQuery();
            query.ViewXml = "";
            DataTable staffListTable = getPMAStaffList(config);
            ListItemCollection items = staffList.GetItems(query);

            spContext
                .Load(items,
                items =>
                    items
                        .Include(item => item.Id,
                        item => item["Title"],
                        item => item["LANID"]));
            spContext.ExecuteQuery();

            foreach (ListItem item in items)
            {
                ListItem staffInfo = staffList.GetItemById(item.Id);
                string v_LANID = item["LANID"].ToString();
                string v_Title = item["Title"].ToString();
                string tlName =
                    getPMAStaffProp(staffListTable,
                    v_LANID,
                    v_Title,
                    "tl_name");
                if (!string.IsNullOrEmpty(tlName))
                {
                    Console.WriteLine(v_Title);
                    staffInfo["TeamLeaderName"] = tlName;
                }

                string tlEmail =
                    getPMAStaffProp(staffListTable,
                    v_LANID,
                    v_Title,
                    "tl_email");
                if (!string.IsNullOrEmpty(tlEmail))
                    staffInfo["TeamLeaderEmail"] = tlEmail;

                string supName =
                    getPMAStaffProp(staffListTable,
                    v_LANID,
                    v_Title,
                    "sup_team_name");
                if (!string.IsNullOrEmpty(supName))
                    staffInfo["SubSBU"] = supName;

                string sbuName =
                    getPMAStaffProp(staffListTable,
                    v_LANID,
                    v_Title,
                    "sbu_team_name");
                if (!string.IsNullOrEmpty(sbuName)) staffInfo["SBU"] = sbuName;

                string funcName =
                    getPMAStaffProp(staffListTable,
                    v_LANID,
                    v_Title,
                    "func_name");
                if (!string.IsNullOrEmpty(funcName))
                    staffInfo["Function"] = funcName;

                string tmName =
                    getPMAStaffProp(staffListTable,
                    v_LANID,
                    v_Title,
                    "team_name");
                if (!string.IsNullOrEmpty(tmName))
                    staffInfo["SubSubSBU"] = tmName;

                staffInfo.Update();
                spContext.ExecuteQuery();
            }
        }
        public static void test(){
            string s="liner;Arunika.Pal@aia.com;Vinayak.Chauhan@aia.com;";
            string x="liner";
          bool t=  s.ToLower().Split(';').Contains(x.ToLower());
          Console.WriteLine(t);

        }

        static void Main(string[] args)
        {
            var a = TimeZoneInfo.Local;
            var builder =
                new ConfigurationBuilder()
                    .AddJsonFile($"appsettings.json", true, true);
            var config = builder.Build();
            Console.WriteLine(Environment.UserName);

            //updateUATdate(config);
            //return;
            string programName = config["AppSettings:Program"];
            switch (programName)
            {
                case "SyncStaffFromWD":
                    SyncStaffFromWD(config);
                    break;
                case "SyncUpdateRequestFromTCS":
                    SyncUpdateRequestFromTCS(config);
                    break;
                case "SyncUpdatePMA":
                    SyncUpdatePMA(config);
                    break;
                case "SyncCheckInJob":
                    SyncCheckInJob(config);
                    break;
                case "SyncCheckOutJob":
                    SyncCheckOutJob(config);
                    break;
                case "SyncTCSFromPMA":
                    SyncUpdateRequestFromTCS(config);
                    break;
                case "SyncTCSFromPMAMonthly":
                    SyncTCSFromPMAMonthly(config);
                    break;
                case "test":
                    test();
                    break;
              
            }
        }
    }
}
